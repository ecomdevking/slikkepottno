{%- if request.page_type != 'cart' and settings.cart_type == 'drawer' -%}
  {%- if request.page_type == 'cart' -%}
    {{ 'cart.css' | asset_url | stylesheet_tag }}
  {%- else -%}
    <link
      rel="stylesheet"
      href="{{ 'cart.css' | asset_url }}"
      media="print"
      fetchpriority="low"
      onload="this.media='all'">
  {%- endif -%}

  {%- style -%}
    /* Bundle product quantity controls styling */
    .quantity--disabled .quantity__button.disabled,
    .quantity--disabled .quantity__input.disabled {
      opacity: 0.5;
      cursor: not-allowed;
      pointer-events: none;
    }

    .quantity--disabled .quantity__input.disabled {
      background-color: #f5f5f5;
      color: #999;
      border-color: #ddd;
    }

    .quantity--disabled .quantity__button.disabled {
      background-color: #f5f5f5;
      color: #999;
      border-color: #ddd;
    }

    /* Add a tooltip or indicator for disabled bundle quantities */
    .quantity--disabled::after {
      content: "Bundle quantity locked";
      position: absolute;
      bottom: -20px;
      left: 0;
      font-size: 10px;
      color: #666;
      white-space: nowrap;
      opacity: 0;
      transition: opacity 0.2s;
    }

    .quantity--disabled:hover::after {
      opacity: 1;
    }
  {%- endstyle -%}
  <script src="{{ 'cart.js' | asset_url }}" defer="defer"></script>
  {%- if linklists['gift-wrapping'].links != blank and linklists['gift-wrapping'].links.first.type == 'product_link' -%}
    <script src="{{ 'gift-wrapping.js' | asset_url }}" defer="defer"></script>
  {%- endif -%}

  <script>
      // Bundle Product Cart Management for Cart Drawer
      (function() {
    console.log('Cart drawer loaded - checking for bundle products...');

    // Function to get bundle data from cart item properties
    function getBundleDataFromItem(item) {
      if (!item.properties || !item.properties._is_bundle) {
        return null;
      }

      console.log('Bundle item properties:', item.properties);

      let productsData = null;
      if (item.properties._bundle_products_data) {
        try {
          productsData = JSON.parse(item.properties._bundle_products_data);
          console.log('Parsed products data:', productsData);
        } catch (e) {
          console.error('Error parsing products data:', e);
        }
      }

      return {
        variantId: item.properties._variant_id,
        discountValue: item.properties._discount_value,
        bundleQuantity: parseInt(item.properties._bundle_quantity) || 1,
        userQuantity: parseInt(item.properties._user_quantity) || 1,
        isBundle: item.properties._is_bundle === 'true',
        productsData: productsData,
        productVariantId: item.properties._product_id
      };
    }

    // Function to group products by bundle ID
    function groupProductsByBundleVariant() {
      const cartItems = window.currentCartItems || {{ cart.items | json }};
      console.log(cartItems, "cartItems")
      const bundleGroups = {};

      cartItems.forEach((item, index) => {
        if (item.properties && item.properties._is_bundle && item.properties._bundle_id) {
          const bundleId = item.properties._bundle_id;
          if (!bundleGroups[bundleId]) {
            bundleGroups[bundleId] = [];
          }
          bundleGroups[bundleId].push({
            index: index,
            item: item,
            bundleData: getBundleDataFromItem(item)
          });
        }
      });

      console.log('Bundle groups (by _bundle_id):', bundleGroups);
      return bundleGroups;
    }

    // Function to validate if products are actually bundled
    function validateBundleGroup(group) {
      console.log('Validating bundle group:', group);

      if (group.length < 2) {
        console.log('Bundle group has less than 2 items, invalid');
        return false; // Need at least 2 products for a bundle
      }

      // Get the first item's data as reference
      const firstItem = group[0];
      const referenceProductsData = firstItem.bundleData.productsData;
      const referenceVariantId = firstItem.item.properties._variant_id;

      if (!referenceProductsData || !Array.isArray(referenceProductsData)) {
        console.log('No valid products data found');
        return false;
      }

      // Check if all items in the group have the same bundle variant ID (bundle product ID)
      const hasSameVariantId = group.every(item => {
        return item.item.properties._variant_id === referenceVariantId;
      });

      if (!hasSameVariantId) {
        console.log('Items in group have different bundle variant IDs');
        return false;
      }

      // Get the expected component variant IDs from the bundle products data
      const expectedVariantIds = referenceProductsData.map((item) => item.id).sort((a, b) => a - b);
      console.log('Expected component variant IDs:', expectedVariantIds);

      // Get the actual component variant IDs in the current group
      const actualVariantIds = group.map((item) => item.bundleData.productVariantId).sort((a, b) => a - b);
      console.log('Actual component variant IDs:', actualVariantIds);

      // Check if we have ALL the required components (not just some of them)
      const hasAllComponents = expectedVariantIds.every(expectedId =>
        actualVariantIds.includes(expectedId)
      );

      console.log(`Bundle validation: Expected ${expectedVariantIds.length} components, found ${actualVariantIds.length}, hasAllComponents: ${hasAllComponents}`);

      const isValidBundle = hasAllComponents && actualVariantIds.length === expectedVariantIds.length;

      console.log(`Bundle validation for group (variantId: ${referenceVariantId}): ${isValidBundle}`);
      return isValidBundle;
    }

    // Function to apply bundle discounts to component products
    function applyBundleDiscounts() {
      const bundleGroups = groupProductsByBundleVariant();
      const cartItems = window.currentCartItems || {{ cart.items | json }};

      // Process bundle groups (don't reset anything initially to preserve automatic discounts)
      // We'll handle resets on a case-by-case basis within each bundle group
      Object.keys(bundleGroups).forEach(bundleId => {
        const group = bundleGroups[bundleId];
        const isValidBundle = validateBundleGroup(group);

        console.log(`Processing bundle group ${bundleId}:`, {
          group: group,
          isValidBundle: isValidBundle
        });

        if (isValidBundle) {
          // Valid bundle group - show both original and discounted prices with bundle indicator
          console.log(`Valid bundle group ${bundleId} - applying bundle discounts`);
          group.forEach(({ index, item, bundleData }) => {
            console.log(`Applying bundle discount to item ${index}:`, {
              item: item,
              bundleData: bundleData
            });
            const cartItemElement = document.querySelector(`#CartDrawer-Item-${index + 1}`);
            // Reset to original price first, then apply bundle discount
            resetToOriginalPrice(cartItemElement, item);
            applyBundleDiscountToCartItem(index, item, bundleData);
            // Hide discount tags for valid bundle items
            if (cartItemElement) {
              toggleDiscountTags(cartItemElement, true);
            }
          });
        } else {
          // Invalid bundle group - show as regular products
          console.log(`Invalid bundle group ${bundleId} - showing as regular products`);
          group.forEach(({ index, item }) => {
            const cartItemElement = document.querySelector(`#CartDrawer-Item-${index + 1}`);
            if (cartItemElement) {
              // Check if this item has an automatic discount
              if (item.original_price !== item.final_price) {
                // Has automatic discount - apply automatic discount display
                console.log(`Invalid bundle item ${index} has automatic discount - applying automatic discount display`);
                applyAutomaticDiscountDisplay(cartItemElement, item);
              } else {
                // No automatic discount - reset to original price
                resetToOriginalPrice(cartItemElement, item);
                console.log(`Reset invalid bundle item ${index} to original price (no discount)`);
              }
              removeBundleIndicator(cartItemElement);
              // Show discount tags for invalid bundle items (if they have discounts)
              toggleDiscountTags(cartItemElement, false);
            }
          });
        }
      });

      // Ensure non-bundle products show correct prices (apply automatic discounts)
      cartItems.forEach((item, index) => {
        if (!item.properties || !item.properties._is_bundle) {
          const cartItemElement = document.querySelector(`#CartDrawer-Item-${index + 1}`);
          if (cartItemElement) {
            // Check if this product has an automatic discount
            if (item.original_price !== item.final_price) {
              // Has automatic discount - apply automatic discount display
              console.log(`Item ${index} has automatic discount - applying automatic discount display`);
              applyAutomaticDiscountDisplay(cartItemElement, item);
              // Ensure discount tags are visible for regular products with discounts
              toggleDiscountTags(cartItemElement, false);
            } else {
              // No discount - reset to ensure clean display
              resetToOriginalPrice(cartItemElement, item);
              removeBundleIndicator(cartItemElement);
              console.log(`Reset non-bundle item ${index} to original price`);
            }
          }
        }
      });
    }

    // Function to reset price display to original
    function resetToOriginalPrice(cartItemElement, item) {
      // Get bundle data to determine if we need to show true original price
      const bundleData = getBundleDataFromItem(item);
      let displayPrice = item.original_price;
      let displayLinePrice = item.original_line_price;

      // If this is a bundle item, get the true original price
      if (bundleData) {
        const trueOriginalPrice = getOriginalProductPrice(item, bundleData);
        displayPrice = trueOriginalPrice;
        displayLinePrice = trueOriginalPrice * item.quantity;
        console.log(`Resetting bundle item to true original price: ${displayPrice}`);
      }

      // Reset unit prices (only .price elements, not line totals)
      const priceElements = cartItemElement.querySelectorAll('.price');

      priceElements.forEach(priceElement => {
        // Remove any existing discount styling
        priceElement.classList.remove('price--on-sale');

        // Clear existing price content
        priceElement.innerHTML = '';

        // Format original unit price
        const formattedPrice = new Intl.NumberFormat('no-NO', {
          style: 'currency',
          currency: 'NOK'
        }).format(displayPrice / 100);

        // Display original unit price
        const priceSpan = document.createElement('span');
        priceSpan.className = 'font-body-bolder';
        priceSpan.textContent = formattedPrice;
        priceElement.appendChild(priceSpan);
      });
    }

    // Function to apply bundle discount to a specific cart item (shows both original and discounted prices)
    function applyBundleDiscountToCartItem(itemIndex, item, bundleData) {
      const cartItemElement = document.querySelector(`#CartDrawer-Item-${itemIndex + 1}`);
      if (!cartItemElement) {
        console.log(`Cart item element not found for index ${itemIndex}`);
        return;
      }

      const discountPercent = parseFloat(bundleData.discountValue) || 0;
      if (discountPercent <= 0) {
        console.log(`Invalid discount percent: ${discountPercent}`);
        return;
      }

      // Get the true original product price (not the already discounted price)
      const trueOriginalPrice = getOriginalProductPrice(item, bundleData);
      const discountAmount = (trueOriginalPrice * discountPercent) / 100;
      const discountedPrice = trueOriginalPrice - discountAmount;

      console.log(`Applying bundle discount ${discountPercent}% to item ${itemIndex}:`, {
        trueOriginalPrice: trueOriginalPrice,
        discountAmount: discountAmount,
        discountedPrice: discountedPrice
      });

      // Update price display (shows both original and discounted prices)
      updateBundlePriceDisplay(cartItemElement, trueOriginalPrice, discountedPrice, discountPercent);
    }

    // Function to remove bundle indicator
    function removeBundleIndicator(cartItemElement) {
      const bundleIndicator = cartItemElement.querySelector('.bundle-indicator');
      if (bundleIndicator) {
        bundleIndicator.remove();
        console.log('Removed bundle indicator from cart item');
      }
    }

    // Function to toggle discount tag visibility based on bundle validity
    function toggleDiscountTags(cartItemElement, isValidBundle) {
      const discountsList = cartItemElement.querySelector('.cart-item__discounts');
      if (discountsList) {
        if (isValidBundle) {
          // Valid bundle - hide discount tags
          discountsList.style.display = 'none';
          console.log('Hiding discount tags for valid bundle item');
        } else {
          // Invalid bundle - show discount tags
          discountsList.style.display = '';
          console.log('Showing discount tags for invalid bundle item');
        }
      }
    }

    // Function to apply automatic discount display (for products with Shopify automatic discounts)
    function applyAutomaticDiscountDisplay(cartItemElement, item) {
      const priceElements = cartItemElement.querySelectorAll('.price');
      
      console.log(`Applying automatic discount display for item:`, {
        originalPrice: item.original_price,
        finalPrice: item.final_price
      });

      priceElements.forEach((priceElement) => {
        // Clear existing content
        priceElement.innerHTML = '';

        // Format prices
        const formattedOriginalPrice = new Intl.NumberFormat('no-NO', {
          style: 'currency',
          currency: 'NOK'
        }).format(item.original_price / 100);

        const formattedFinalPrice = new Intl.NumberFormat('no-NO', {
          style: 'currency',
          currency: 'NOK'
        }).format(item.final_price / 100);

        console.log(`Formatted automatic discount prices:`, {
          original: formattedOriginalPrice,
          final: formattedFinalPrice
        });

        // Create final price (current price) - this is the main price
        const regularPriceSpan = document.createElement('span');
        regularPriceSpan.className = 'price__regular font-body-bolder';
        regularPriceSpan.textContent = formattedFinalPrice;
        priceElement.appendChild(regularPriceSpan);

        // Create original price (crossed out)
        const salePriceSpan = document.createElement('s');
        salePriceSpan.className = 'price__sale font-body text-subtext';
        salePriceSpan.textContent = formattedOriginalPrice;
        priceElement.appendChild(salePriceSpan);

        // Add sale styling to show both prices
        priceElement.classList.add('price--on-sale');

        console.log(`Automatic discount price element updated:`, priceElement.innerHTML);
      });
    }

    // Function to update bundle price display (shows both original and discounted prices)
    function updateBundlePriceDisplay(cartItemElement, originalPrice, discountedPrice, discountPercent) {
      // Find price elements in both desktop and mobile views
      const priceElements = cartItemElement.querySelectorAll('.price');

      console.log(`Updating bundle price display:`, {
        originalPrice: originalPrice,
        discountedPrice: discountedPrice,
        discountPercent: discountPercent,
        priceElementsFound: priceElements.length
      });

      priceElements.forEach((priceElement, index) => {
        console.log(`Updating price element ${index}:`, priceElement);

        // Clear existing content
        priceElement.innerHTML = '';

        // Format prices
        const formattedOriginalPrice = new Intl.NumberFormat('no-NO', {
          style: 'currency',
          currency: 'NOK'
        }).format(originalPrice / 100);

        const formattedDiscountedPrice = new Intl.NumberFormat('no-NO', {
          style: 'currency',
          currency: 'NOK'
        }).format(discountedPrice / 100);

        console.log(`Formatted prices:`, {
          original: formattedOriginalPrice,
          discounted: formattedDiscountedPrice
        });

        // Create discounted price (current price) - this is the main price
        const regularPriceSpan = document.createElement('span');
        regularPriceSpan.className = 'price__regular font-body-bolder';
        regularPriceSpan.textContent = formattedDiscountedPrice;
        priceElement.appendChild(regularPriceSpan);

        // Create original price (crossed out) - this shows the original price
        const salePriceSpan = document.createElement('s');
        salePriceSpan.className = 'price__sale font-body text-subtext';
        salePriceSpan.textContent = formattedOriginalPrice;
        priceElement.appendChild(salePriceSpan);

        // Add sale styling to show both prices
        priceElement.classList.add('price--on-sale');

        console.log(`Price element ${index} updated:`, priceElement.innerHTML);
      });
    }

    // Function to update quantity controls based on bundle validity
    function updateQuantityControls() {
      console.log('Updating quantity controls based on bundle validity...');

      const cartItems = window.currentCartItems || {{ cart.items | json }};
      const bundleGroups = groupProductsByBundleVariant();

      cartItems.forEach((item, index) => {
        const cartItemElement = document.querySelector(`#CartDrawer-Item-${index + 1}`);
        if (!cartItemElement) return;

        const quantityInput = cartItemElement.querySelector('input[name="updates[]"]');
        const minusButton = cartItemElement.querySelector('button[name="minus"]');
        const plusButton = cartItemElement.querySelector('button[name="plus"]');
        const quantityWrapper = cartItemElement.querySelector('.quantity');

        if (!quantityInput || !quantityWrapper) return;

        // Check if this is a bundle product
        if (item.properties && item.properties._is_bundle && item.properties._bundle_id) {
          const bundleId = item.properties._bundle_id;
          const bundleGroup = bundleGroups[bundleId];
          const isValidBundle = bundleGroup && validateBundleGroup(bundleGroup);

          console.log(`Item ${index}: Bundle ID ${bundleId}, Valid: ${isValidBundle}`);

          if (isValidBundle) {
            // Valid bundle - disable controls
            quantityInput.disabled = true;
            quantityInput.readOnly = true;
            minusButton.disabled = true;
            plusButton.disabled = true;
            quantityWrapper.classList.add('quantity--disabled');
            minusButton.classList.add('disabled');
            plusButton.classList.add('disabled');
            quantityInput.classList.add('disabled');
            console.log(`Disabled quantity controls for valid bundle item ${index}`);
          } else {
            // Invalid bundle - enable controls
            quantityInput.disabled = false;
            quantityInput.readOnly = false;
            minusButton.disabled = false;
            plusButton.disabled = false;
            quantityWrapper.classList.remove('quantity--disabled');
            minusButton.classList.remove('disabled');
            plusButton.classList.remove('disabled');
            quantityInput.classList.remove('disabled');
            console.log(`Enabled quantity controls for invalid bundle item ${index}`);
          }
        } else {
          // Regular product - ensure controls are enabled
          quantityInput.disabled = false;
          quantityInput.readOnly = false;
          minusButton.disabled = false;
          plusButton.disabled = false;
          quantityWrapper.classList.remove('quantity--disabled');
          minusButton.classList.remove('disabled');
          plusButton.classList.remove('disabled');
          quantityInput.classList.remove('disabled');
        }
      });
    }

    // Function to update cart drawer subtotal based on actual prices
    function updateCartDrawerSubtotal() {
      console.log('=== UPDATING CART DRAWER SUBTOTAL ===');

      // Always get fresh cart data
      const cartItems = window.currentCartItems || {{ cart.items | json }};
      console.log('Cart items for subtotal calculation:', cartItems);

      // Check if there are any discount codes applied
      const hasDiscountCodes = {{ cart.cart_level_discount_applications.size }} > 0;
      console.log('Has discount codes:', hasDiscountCodes);
      
      // If discount codes are applied, completely skip JavaScript override
      // Let Shopify handle the calculation with discount codes
      if (hasDiscountCodes) {
        console.log('Discount codes detected - skipping JavaScript override to preserve discount code functionality');
        console.log('Letting Shopify handle the final calculation with discount codes');
        return;
      }

      let calculatedTotal = 0;

      // Get bundle groups to check which items should have discounts
      const bundleGroups = groupProductsByBundleVariant();
      console.log('Bundle groups for subtotal:', bundleGroups);

      cartItems.forEach((item, index) => {
        console.log(`Processing item ${index}:`, {
          id: item.variant_id,
          title: item.product_title,
          isBundle: item.properties?._is_bundle,
          bundleId: item.properties?._bundle_id,
          discountValue: item.properties?._discount_value,
          originalLinePrice: item.original_line_price
        });

        // Check if this is a bundle product and if it's part of a valid bundle group
        if (item.properties && item.properties._is_bundle && item.properties._bundle_id) {
          const bundleId = item.properties._bundle_id;
          const bundleGroup = bundleGroups[bundleId];
          const isValidBundle = bundleGroup && validateBundleGroup(bundleGroup);

          console.log(`Bundle validation for item ${index}:`, {
            bundleId: bundleId,
            bundleGroup: bundleGroup,
            isValidBundle: isValidBundle
          });

          if (isValidBundle && item.properties._discount_value) {
            // This is a valid bundle product with discount - get true original price and calculate discount
            const discountPercent = parseFloat(item.properties._discount_value) || 0;

            // Get bundle data to find true original price
            const bundleData = getBundleDataFromItem(item);
            let trueOriginalPrice = item.original_price; // Use original_price from cart item

            if (bundleData && bundleData.productsData && Array.isArray(bundleData.productsData)) {
              const productData = bundleData.productsData.find(p => p.id == item.variant_id);
              if (productData && productData.price) {
                trueOriginalPrice = productData.price;
              }
            }

            // Calculate true original line price and then apply discount
            const trueOriginalLinePrice = trueOriginalPrice * item.quantity;
            const discountAmount = (trueOriginalLinePrice * discountPercent) / 100;
            const discountedLinePrice = trueOriginalLinePrice - discountAmount;
            calculatedTotal += discountedLinePrice;

            console.log(`✅ Valid bundle item ${index}: True Original ${trueOriginalLinePrice}, Discounted ${discountedLinePrice}`);
          } else {
            // This is an invalid bundle - check if it has automatic discount
            if (item.original_price !== item.final_price) {
              // Invalid bundle item with automatic discount - use final_line_price
              calculatedTotal += item.final_line_price;
              console.log(`❌ Invalid bundle item ${index} with automatic discount: ${item.final_line_price} (original: ${item.original_line_price})`);
            } else {
              // Invalid bundle item without automatic discount - use true original price
              const bundleData = getBundleDataFromItem(item);
              let trueOriginalPrice = item.original_price; // Use original_price from cart item

              if (bundleData && bundleData.productsData && Array.isArray(bundleData.productsData)) {
                const productData = bundleData.productsData.find(p => p.id == item.variant_id);
                if (productData && productData.price) {
                  trueOriginalPrice = productData.price;
                }
              }

              const trueOriginalLinePrice = trueOriginalPrice * item.quantity;
              calculatedTotal += trueOriginalLinePrice;

              console.log(`❌ Invalid bundle item ${index}: True Original ${trueOriginalLinePrice} (no automatic discount)`);
            }
          }
        } else {
          // This is a regular product - check if it has automatic discount
          if (item.original_price !== item.final_price) {
            // Has automatic discount - use final_line_price
            calculatedTotal += item.final_line_price;
            console.log(`💰 Regular item ${index} with automatic discount: ${item.final_line_price} (original: ${item.original_line_price})`);
          } else {
            // No discount - use original_line_price
            calculatedTotal += item.original_line_price;
            console.log(`📦 Regular item ${index}: ${item.original_line_price}`);
          }
        }
      });

      console.log(`Final calculated total: ${calculatedTotal}`);

      // Update the subtotal display
      const subtotalElement = document.getElementById('cart-drawer-subtotal-value');

      if (subtotalElement) {
        const formattedTotal = new Intl.NumberFormat('no-NO', {
          style: 'currency',
          currency: 'NOK'
        }).format(calculatedTotal / 100);

        console.log(`Updating cart drawer subtotal display to: ${formattedTotal}`);
        console.log(`Previous subtotal was: ${subtotalElement.textContent}`);
        subtotalElement.textContent = formattedTotal;
        console.log(`New subtotal is: ${subtotalElement.textContent}`);
      } else {
        console.error('Cart drawer subtotal element not found!');
        console.log('Available elements with cart-drawer-subtotal:', document.querySelectorAll('[id*="cart-drawer-subtotal"]'));
      }

      console.log('=== END CART DRAWER SUBTOTAL UPDATE ===');
    }

    // Function to update bundle product display
    function updateBundleProductDisplay() {
      console.log('Updating bundle product display...');
      applyBundleDiscounts();
      updateQuantityControls();
      updateCartDrawerSubtotal();
    }

    // Function to reinitialize bundle display after cart changes
    async function reinitializeBundleDisplay() {
      console.log('Reinitializing bundle display after cart changes...');

      // Always get fresh cart data
      const currentCartData = await getCurrentCartData();
      if (currentCartData && currentCartData.items) {
        console.log('Using fresh cart data for bundle display update');
        console.log('Updated cart items:', currentCartData.items);
        // Update the cart items in the global scope for the bundle functions
        window.currentCartItems = currentCartData.items;
      } else {
        console.warn('No cart data received, using existing data');
      }

      // Small delay to ensure DOM is updated
      setTimeout(() => {
        console.log('Calling updateBundleProductDisplay after cart data refresh...');
        updateBundleProductDisplay();
      }, 100);
    }

    // Function to get current cart data dynamically
    async function getCurrentCartData() {
      try {
        const response = await fetch('/cart.js');
        const cartData = await response.json();
        console.log('Current cart data from API:', cartData);
        return cartData;
      } catch (error) {
        console.error('Error fetching cart data:', error);
        return null;
      }
    }

    // Function to force refresh cart drawer content
    async function forceRefreshCartDrawer() {
      console.log('Force refreshing cart drawer content...');

      try {
        // Get the cart drawer section ID
        const cartDrawer = document.querySelector('cart-drawer');
        const sectionId = cartDrawer ? cartDrawer.getAttribute('data-section-id') : null;

        if (sectionId) {
          // Fetch fresh cart drawer content
          const response = await fetch(`/?section_id=${sectionId}`);
          const responseText = await response.text();

          const parser = new DOMParser();
          const parsedHTML = parser.parseFromString(responseText, 'text/html');

          // Update cart drawer body
          const cartDrawerBody = document.querySelector(`#CartDrawerBody-${sectionId}`);
          const newCartDrawerBody = parsedHTML.querySelector(`#CartDrawerBody-${sectionId}`);

          if (cartDrawerBody && newCartDrawerBody) {
            cartDrawerBody.innerHTML = newCartDrawerBody.innerHTML;
            console.log('Cart drawer body refreshed with fresh content');
          }

          // Update cart drawer footer
          const cartDrawerFooter = document.querySelector(`#CartDrawerFooter-${sectionId}`);
          const newCartDrawerFooter = parsedHTML.querySelector(`#CartDrawerFooter-${sectionId}`);

          if (cartDrawerFooter && newCartDrawerFooter) {
            cartDrawerFooter.innerHTML = newCartDrawerFooter.innerHTML;
            console.log('Cart drawer footer refreshed with fresh content');
          }

          // Update cart drawer empty state
          const cartDrawerEmpty = document.querySelector(`#CartDrawerEmpty-${sectionId}`);
          const newCartDrawerEmpty = parsedHTML.querySelector(`#CartDrawerEmpty-${sectionId}`);

          if (cartDrawerEmpty && newCartDrawerEmpty) {
            cartDrawerEmpty.innerHTML = newCartDrawerEmpty.innerHTML;
            console.log('Cart drawer empty state refreshed with fresh content');
          }
        }

        // Get fresh cart data and update bundle display
        const currentCartData = await getCurrentCartData();
        if (currentCartData && currentCartData.items) {
          window.currentCartItems = currentCartData.items;
          console.log('Fresh cart data loaded for force refresh:', currentCartData.items);

          // Show/hide cart drawer sections based on cart state
          const cartDrawerBody = document.querySelector(`#CartDrawerBody-${sectionId}`);
          const cartDrawerFooter = document.querySelector(`#CartDrawerFooter-${sectionId}`);
          const cartDrawerEmpty = document.querySelector(`#CartDrawerEmpty-${sectionId}`);

          if (currentCartData.item_count > 0) {
            if (cartDrawerBody) cartDrawerBody.classList.remove('hidden');
            if (cartDrawerFooter) cartDrawerFooter.classList.remove('hidden');
            if (cartDrawerEmpty) cartDrawerEmpty.classList.add('hidden');
          } else {
            if (cartDrawerBody) cartDrawerBody.classList.add('hidden');
            if (cartDrawerFooter) cartDrawerFooter.classList.add('hidden');
            if (cartDrawerEmpty) cartDrawerEmpty.classList.remove('hidden');
          }
        }

        // Update bundle display with fresh data
        setTimeout(() => {
          updateBundleProductDisplay();
        }, 100);

      } catch (error) {
        console.error('Error force refreshing cart drawer:', error);
      }
    }

    // Function to get original product price from product data
    function getOriginalProductPrice(item, bundleData) {
      // If we have the original product data in bundleData.productsData, use that
      if (bundleData.productsData && Array.isArray(bundleData.productsData)) {
        const productData = bundleData.productsData.find(p => p.id == item.variant_id);
        if (productData && productData.price) {
          console.log(`Found original price from bundle data: ${productData.price} for variant ${item.variant_id}`);
          return productData.price;
        }
      }

      // Fallback: calculate original price by reversing the discount
      const discountPercent = parseFloat(bundleData.discountValue) || 0;
      if (discountPercent > 0) {
        // If current price is already discounted, calculate original price
        const currentPrice = item.original_price;
        const originalPrice = Math.round(currentPrice / (1 - discountPercent / 100));
        console.log(`Calculated original price: ${originalPrice} from current price: ${currentPrice} with discount: ${discountPercent}%`);
        return originalPrice;
      }

      // If no discount, return current price
      return item.original_price;
    }

    // Initialize when DOM is ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', async function() {
        // Get fresh cart data on initial load
        const currentCartData = await getCurrentCartData();
        if (currentCartData && currentCartData.items) {
          window.currentCartItems = currentCartData.items;
          console.log('Initial cart data loaded:', currentCartData.items);
        }
        updateBundleProductDisplay();
      });
    } else {
      // DOM is already loaded, get fresh cart data
      getCurrentCartData().then(currentCartData => {
        if (currentCartData && currentCartData.items) {
          window.currentCartItems = currentCartData.items;
          console.log('Initial cart data loaded (DOM ready):', currentCartData.items);
        }
        updateBundleProductDisplay();
      });
    }

    // Listen for cart drawer opening to refresh data
    const cartDrawer = document.querySelector('cart-drawer');
    if (cartDrawer) {
      // Listen for when the drawer is shown
      const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          if (mutation.type === 'attributes' && mutation.attributeName === 'hidden') {
            if (!cartDrawer.hasAttribute('hidden')) {
              console.log('Cart drawer opened - reinitializing bundle display...');
              // Reinitialize bundle display when drawer opens
              setTimeout(() => {
                reinitializeBundleDisplay();
              }, 100);
            }
          }
        });
      });

      observer.observe(cartDrawer, { attributes: true });

      // Also listen for the drawer's show method being called
      const originalShow = cartDrawer.show;
      if (originalShow) {
        cartDrawer.show = function(...args) {
          console.log('Cart drawer show method called - will reinitialize bundle display...');
          const result = originalShow.apply(this, args);
          // Reinitialize bundle display when shown
          setTimeout(() => {
            reinitializeBundleDisplay();
          }, 100);
          return result;
        };
      }
    }

    // Listen for cart updates and reinitialize bundle display
    document.addEventListener('cart:updated', reinitializeBundleDisplay);
    document.addEventListener('cart:refresh', reinitializeBundleDisplay);
    document.addEventListener('cart:change', reinitializeBundleDisplay);

    // Also listen for product added events to refresh bundle display
    document.addEventListener('product-ajax:added', function(event) {
      console.log('Product added event received - refreshing bundle display...');
      setTimeout(() => {
        reinitializeBundleDisplay();
      }, 100);
    });

    // Listen for quantity changes
    document.addEventListener('change', function(event) {
      if (event.target.matches('input[name="updates[]"]')) {
        // Check if this is a bundle product
        const cartItem = event.target.closest('[id^="CartDrawer-Item-"]');
        if (cartItem) {
          const cartItemIndex = cartItem.id.replace('CartDrawer-Item-', '');
          const cartItems = window.currentCartItems || {{ cart.items | json }};
          const item = cartItems[parseInt(cartItemIndex) - 1];

          if (item && item.properties && item.properties._is_bundle && item.properties._bundle_id) {
            // Check if this bundle group is still valid
            const bundleGroups = groupProductsByBundleVariant();
            const bundleId = item.properties._bundle_id;
            const bundleGroup = bundleGroups[bundleId];
            const isValidBundle = bundleGroup && validateBundleGroup(bundleGroup);

            if (isValidBundle) {
              console.log('Valid bundle product quantity change detected - preventing change');
              // Reset to original quantity
              event.target.value = item.quantity;
              event.preventDefault();
              return false;
            } else {
              console.log('Invalid bundle product - allowing quantity change');
            }
          }
        }

        console.log('Quantity changed, reinitializing bundle display...');
        reinitializeBundleDisplay();
      }
    });

    // Listen for item removals and quantity button clicks
    document.addEventListener('click', function(event) {
      if (event.target.closest('[is="cart-remove-item"]') || event.target.closest('[is="gift-wrap-remove-item"]')) {
        console.log('Item removal detected, reinitializing bundle display...');
        // Immediate update first
        setTimeout(() => {
          reinitializeBundleDisplay();
        }, 100);
        // Then full reinitialize
        setTimeout(() => {
          reinitializeBundleDisplay();
        }, 500); // Longer delay for removal
      }

      // Prevent quantity button clicks for bundle products
      if (event.target.matches('.quantity__button')) {
        const cartItem = event.target.closest('[id^="CartDrawer-Item-"]');
        if (cartItem) {
          const cartItemIndex = cartItem.id.replace('CartDrawer-Item-', '');
          const cartItems = window.currentCartItems || {{ cart.items | json }};
          const item = cartItems[parseInt(cartItemIndex) - 1];

          if (item && item.properties && item.properties._is_bundle && item.properties._bundle_id) {
            // Check if this bundle group is still valid
            const bundleGroups = groupProductsByBundleVariant();
            const bundleId = item.properties._bundle_id;
            const bundleGroup = bundleGroups[bundleId];
            const isValidBundle = bundleGroup && validateBundleGroup(bundleGroup);

            if (isValidBundle) {
              console.log('Valid bundle product quantity button clicked - preventing action');
              event.preventDefault();
              event.stopPropagation();
              return false;
            } else {
              console.log('Invalid bundle product - allowing quantity button action');
            }
          }
        }
      }
    });

    // Make functions globally available for debugging
    window.getBundleDataFromItem = getBundleDataFromItem;
    window.updateBundleProductDisplay = updateBundleProductDisplay;
    window.groupProductsByBundleVariant = groupProductsByBundleVariant;
    window.validateBundleGroup = validateBundleGroup;
    window.applyBundleDiscounts = applyBundleDiscounts;
    window.updateQuantityControls = updateQuantityControls;
    window.updateCartDrawerSubtotal = updateCartDrawerSubtotal;
    window.reinitializeBundleDisplay = reinitializeBundleDisplay;
    window.forceRefreshCartDrawer = forceRefreshCartDrawer;
    window.toggleDiscountTags = toggleDiscountTags;
    window.applyAutomaticDiscountDisplay = applyAutomaticDiscountDisplay;

    // Add manual trigger for testing
    window.forceBundleUpdate = function() {
      console.log('Manually triggering bundle display update...');
      reinitializeBundleDisplay();
    };

    // Add manual trigger for subtotal update
    window.forceSubtotalUpdate = function() {
      console.log('Manually triggering cart drawer subtotal update...');
      updateCartDrawerSubtotal();
    };

      })();
  </script>

  <cart-drawer
    id="CartDrawer"
    class="drawer cart-drawer drawer--right"
    data-section-id="{{ section.id }}"
    shopify-design-mode
    hidden>
    <div class="fixed-overlay" aria-controls="CartDrawer"></div>
    <div class="drawer__inner color-{{ settings.overlay_color_scheme }}">
      <div id="CartDrawer-{{ section.id }}" class="drawer__content flex flex-col h-full w-full">
        <div class="drawer__header">
          {%- if section.settings.cart_message != blank -%}
            <div class="cart-drawer__message color-{{ section.settings.cart_mess_color_scheme }} text-{{ section.settings.cart_message_alignment }}">
              {{ section.settings.cart_message }}
            </div>
          {%- endif -%}
          <div class="drawer__header-inner cart-drawer__header flex items-center justify-between gap-3">
            <h2 class="drawer__heading h4">
              <span>{{ 'general.cart.title' | t }}</span>
              <cart-count
                class="cart-count cart-count--blank"
                aria-label="{{ 'general.cart.cart_count' | t: count: cart.item_count | escape }}"
                {% if cart == empty %}
                hidden
                {% endif %}
                data-type="blank">
                (
                {%- if cart.item_count < 100 -%}
                  {{- cart.item_count -}}
                {%- else -%}
                  99+
                {%- endif -%}
                )
              </cart-count>
            </h2>
            <button
              class="drawer__close-btn z-1 static"
              aria-controls="CartDrawer"
              type="button"
              aria-label="{{ 'accessibility.close' | t }}">
              {% render 'icon-close'
                , size: 'large' %}
            </button>
          </div>
        </div>
        <div id="CartDrawerEmpty-{{ section.id }}" class="drawer__body flex-grow v-scrollable{% if cart != empty %} hidden{% endif %}">
          <div class="cart-drawer__empty text-center flex flex-col gap-6 md:gap-8">
            <div class="grid gap-3">
              <p class="h4">{{ 'sections.cart.empty' | t }}</p>
              {%- if settings.cart_empty_message != blank -%}
                <div class="rte text-subtext">{{ settings.cart_empty_message }}</div>
              {%- endif -%}
            </div>
            {%- if settings.collection_list != blank -%}
              {% liquid
                assign card_has_bg = false
                if settings.collection_card_color_scheme != settings.overlay_color_scheme
                  assign card_has_bg = true
                endif
              %}
              <ul class="recommendation-collection f-grid" role="list">
                {%- for collection in settings.collection_list -%}
                  {% liquid
                    if collection.image
                      assign featured_image = collection.image
                    elsif collection.metafields.foxtheme.collection_in_cart.value != blank
                      assign featured_image = collection.metafields.foxtheme.collection_in_cart.value
                    else
                      assign featured_image = collection.products.first.featured_media.preview_image
                    endif
                  %}
                  <li class="recommendation-collection-item">
                    {% render 'card-collection'
                      , collection: collection
                      , has_bg: card_has_bg
                      , featured_image: featured_image
                      , card_style: 'card'
                      , color_scheme: settings.collection_card_color_scheme
                      , image_ratio: settings.collection_image_ratio
                      , image_width: 'full'
                      , heading_size: 'h6 font-body-bolder'
                      , classes: 'text-left'
                    %}
                  </li>
                {%- endfor -%}
              </ul>
            {%- endif -%}
            <a class="btn btn--primary self-center" href="{{ routes.all_products_collection_url }}">
              <span class="btn__text">{{- 'general.cart.continue_shopping' | t -}}</span>
            </a>
          </div>
        </div>
        <div class="drawer__body flex-grow v-scrollable flex flex-col">
          <div class="foxkit-cart-countdown-hook"></div>
          <div class="foxkit-cart-goal-hook"></div>
          {%- liquid
            if section.settings.show_free_shipping_goal and settings.free_shipping_minimum_amount != blank
              assign minimum_amount = settings.free_shipping_minimum_amount | remove: ' '
              render 'free-shipping-goal', minimum_amount: minimum_amount, classes: 'w-full'
            endif
          -%}
          <div id="CartDrawerBody-{{ section.id }}" class="flex flex-col gap-6 flex-grow{% if cart == empty %} hidden{% endif %}">
            {%- liquid
              if linklists['gift-wrapping'].links != blank and linklists['gift-wrapping'].links.first.type == 'product_link'
                assign gift_wrapping = linklists['gift-wrapping'].links.first

                assign gift_wrap_id = gift_wrapping.object.variants.first.id
                assign gift_wraps_in_cart = 0
                for item in cart.items
                  if item.id == gift_wrap_id
                    assign gift_wraps_in_cart = item.quantity
                    break
                  endif
                endfor
                assign items_in_cart = cart.item_count | minus: gift_wraps_in_cart
              endif
            -%}
            <cart-items class="flex-grow">
              <ul role="list" class="flex flex-col gap-6">
                {%- for item in cart.items -%}
                  {%- liquid
                    if item.variant.inventory_management != blank and item.variant.inventory_policy == 'deny'
                      assign item_max_quantity = item.variant.inventory_quantity
                    endif

                    assign is_gift_wrap_item = false
                    if gift_wrap_id != null and item.id == gift_wrap_id
                      assign is_gift_wrap_item = true
                    endif
                  -%}
                  {%- capture cart_item -%}
                  <li id="CartDrawer-Item-{{ item.index | plus: 1 }}" class="cart-item flex flex-col" data-variant-id="{{ item.variant_id }}" data-handle="{{ item.product.handle }}" data-quantity="{{ item.quantity }}" data-price="{{ item.original_price }}">
                    <div class="cart-item__product flex items-start gap-3">
                      {%- if item.image -%}
                        <a class="cart-item__media blocks-radius media-wrapper" href="{{ item.url }}" tabindex="-1" aria-label="{{ item.title }}">
                          {{- item.image
                            | image_url: width: item.image.width
                            | image_tag:
                            loading: 'lazy',
                            widths: '80, 100, 160, 200',
                            sizes: '(max-width: 767px) 80px, 100px',
                            is: 'image-lazy'
                          -}}
                        </a>
                      {%- endif -%}
                      <div class="cart-item__details flex-grow flex flex-col gap-3">
                        <div class="flex justify-between gap-3">
                          <div class="grid flex-1">
                            <div class="flex flex-col gap-1">
                              <div class="block"><a href="{{ item.url }}" class="cart-item__title text-pcard-title reversed-link">{{- item.product.title | escape -}}</a></div>
                              {%- if item.properties._is_bundle and item.properties._discount_value -%}
                                <span class="bundle-indicator text-xs bg-green-100 text-green-800 px-2 py-1 rounded w-fit">
                                  BUNDLE (-{{ item.properties._discount_value }}%)
                                </span>
                              {%- endif -%}
                            </div>
                            {%- if item.product.has_only_default_variant == false or item.properties.size != 0 or item.selling_plan_allocation != null -%}
                              <div class="cart-item__options">
                                {%- if item.product.has_only_default_variant == false -%}
                                  {%- assign last_index = item.options_with_values.size | minus: 1 -%}
                                  {%- for option in item.options_with_values -%}
                                    <span class="cart-item__option-value text-sm text-subtext">
                                      {{ option.value }}{% unless forloop.index0 == last_index %}, {% endunless %}
                                    </span>
                                  {%- endfor -%}
                                {%- endif -%}

                                {%- for property in item.properties -%}
                                  {%- assign property_first_char = property.first | slice: 0 -%}
                                  {%- if property.last != blank and property_first_char != '_' -%}
                                    <div class="flex gap-1 text-sm text-subtext">
                                      <dt>{{ property.first }}:&nbsp;</dt>
                                      <dd>
                                        {%- if property.last contains '/uploads/' -%}
                                          <a href="{{ property.last }}" class="link" target="_blank" aria-describedby="a11y-new-window-message">
                                            {{- property.last | split: '/' | last -}}
                                          </a>
                                        {%- else -%}
                                          {{- property.last -}}
                                        {%- endif -%}
                                      </dd>
                                    </div>
                                  {%- endif -%}
                                {%- endfor -%}
                                {%- if item.selling_plan_allocation != null -%}
                                  <p class="text-sm text-subtext">{{ item.selling_plan_allocation.selling_plan.name }}</p>
                                {%- endif -%}
                              </div>
                            {%- endif -%}
                          </div>
                          <a id="Loader-{{ section.id }}-{{ item.index | plus: 1 }}"{% unless is_gift_wrap_item %} is="cart-remove-item"{% else %} is="gift-wrap-remove-item"{% endunless %} class="cart-item__remove flex items-center justify-center relative btn-remove" href="{{ item.url_to_remove }}" data-index="{{ item.index | plus: 1 }}" aria-label="{{ 'sections.cart.remove_title' | t: title: item.title }}">
                            <span class="flex">
                              {%- render 'icon-close', size: 'small' -%}
                            </span>
                            {% render 'loading-spinner' %}
                          </a>
                        </div>
                        <div class="cart-item__action cart-item__action flex items-center justify-between gap-3">
                          {%- liquid
                            assign has_qty_rules = false
                            if item.variant.quantity_rule.increment > 1 or item.variant.quantity_rule.min > 1 or item.variant.quantity_rule.max != null
                              assign has_qty_rules = true
                            endif

                            assign has_vol_pricing = false
                            if item.variant.quantity_price_breaks.size > 0
                              assign has_vol_pricing = true
                            endif
                          -%}

                          {%- if has_qty_rules or has_vol_pricing -%}
                            {%- capture qty_rules_vol_pricing -%}
                              {%- if has_qty_rules -%}
                                <div
                                  class="quantity__rules text-sm"
                                >
                                  {%- if item.variant.quantity_rule.increment > 1 -%}
                                    <span class="divider">
                                      {{-
                                        'products.product.quantity.multiples_of'
                                        | t: quantity: item.variant.quantity_rule.increment
                                      -}}
                                    </span>
                                  {%- endif -%}
                                  {%- if item.variant.quantity_rule.min > 1 -%}
                                    <span class="divider">
                                      {{-
                                        'products.product.quantity.minimum_of'
                                        | t: quantity: item.variant.quantity_rule.min
                                      -}}
                                    </span>
                                  {%- endif -%}
                                  {%- if item.variant.quantity_rule.max != null -%}
                                    <span class="divider">
                                      {{-
                                        'products.product.quantity.maximum_of'
                                        | t: quantity: item.variant.quantity_rule.max
                                      -}}
                                    </span>
                                  {%- endif -%}
                                </div>
                              {%- endif -%}
                              {%- if has_vol_pricing -%}
                                {{ 'component-volume-pricing.css' | asset_url | stylesheet_tag }}
                                <volume-pricing class="block parent-display blocks-radius-md" id="Volume-{{ section.id }}">
                                  <span class="caption block">{{ 'products.product.volume_pricing.title' | t }}</span>
                                  <ul class="list-unstyled">
                                    <li class="blocks-radius-md">
                                      <span>{{ item.variant.quantity_rule.min }}+</span>
                                      {%- liquid
                                        if settings.currency_code_enabled
                                          assign price = item.variant.price | money_with_currency
                                        else
                                          assign price = item.variant.price | money
                                        endif
                                      -%}
                                      <span> {{ 'sections.quick_order_list.each' | t: money: price }}</span>
                                    </li>
                                    {%- for price_break in item.variant.quantity_price_breaks -%}
                                      <li class="blocks-radius-md">
                                        <span>
                                          {{- price_break.minimum_quantity -}}
                                          <span aria-hidden="true">+</span>
                                        </span>
                                        {%- liquid
                                          if settings.currency_code_enabled
                                            assign price_break_price = price_break.price | money_with_currency
                                          else
                                            assign price_break_price = price_break.price | money
                                          endif
                                        -%}
                                        <span>{{ 'sections.quick_order_list.each' | t: money: price_break_price }}</span>
                                      </li>
                                    {%- endfor -%}
                                  </ul>
                                </volume-pricing>
                              {%- endif -%}
                            {%- endcapture -%}
                          {%- endif -%}
                          <div class="flex items-center gap-2">
                            {%- unless is_gift_wrap_item -%}
                              {%- liquid
                                assign is_bundle_item = false
                                assign is_valid_bundle = false

                                if item.properties._is_bundle and item.properties._bundle_id
                                  assign is_bundle_item = true

                                  # Check if this bundle group is still valid (has ALL required components)
                                  assign bundle_id = item.properties._bundle_id
                                  assign bundle_count = 0
                                  assign expected_components = 0

                                  # Count items in this bundle group
                                  for other_item in cart.items
                                    if other_item.properties._bundle_id == bundle_id
                                      assign bundle_count = bundle_count | plus: 1
                                    endif
                                  endfor

                                  # Get expected number of components from bundle products data
                                  if item.properties._bundle_products_data
                                    assign bundle_products_data = item.properties._bundle_products_data | parse_json
                                    assign expected_components = bundle_products_data.size
                                  endif

                                  # Bundle is valid only if we have ALL expected components
                                  if bundle_count == expected_components and expected_components >= 2
                                    assign is_valid_bundle = true
                                  endif

                                  # Debug logging
                                  echo '<!-- Bundle Debug: Item ' | append: item.index | append: ', Bundle ID: ' | append: bundle_id | append: ', Count: ' | append: bundle_count | append: ', Expected: ' | append: expected_components | append: ', Valid: ' | append: is_valid_bundle | append: ' -->'
                                endif
                              -%}
                              <quantity-input class="cart-quantity quantity{% if is_bundle_item and is_valid_bundle %} quantity--disabled{% endif %} self-end">
                                <label class="visually-hidden" for="Quantity-{{ section.id }}-{{ item.index | plus: 1 }}">{{ 'products.product.quantity.label' | t }}</label>
                                <button type="button" name="minus" class="quantity__button{% if is_bundle_item and is_valid_bundle %} disabled{% endif %}"
                                  {% if is_bundle_item and is_valid_bundle %}disabled{% endif %}
                                  aria-label="{{ 'products.product.quantity.decrease' | t: product: item.product.title | escape }}">
                                  <svg width="16" height="16" viewBox="0 0 15 14" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M2.6875 7H12.3125" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                  </svg>
                                </button>
                                <input class="quantity__input{% if is_bundle_item and is_valid_bundle %} disabled{% endif %}"
                                  type="number"
                                  name="updates[]"
                                  value="{{ item.quantity }}"
                                  id="Quantity-{{ section.id }}-{{ item.index | plus: 1 }}"
                                  aria-label="{{ 'products.product.quantity.input_label' | t: product: item.product.title | escape }}"
                                  step="{{ item.variant.quantity_rule.increment }}"
                                  size="2"
                                  inputmode="numeric"
                                  autocomplete="off"
                                  data-index="{{ item.index | plus: 1 }}"
                                  data-quantity-variant-id="{{ item.variant.id }}"
                                  data-cart-quantity="{{ cart | item_count_for_variant: item.variant.id }}"
                                  min="0"
                                  data-min="{{ item.variant.quantity_rule.min }}"
                                  {% if item.variant.quantity_rule.max != null %}
                                    max="{{ item.variant.quantity_rule.max }}"
                                  {% endif %}
                                  {% if is_bundle_item and is_valid_bundle %}disabled readonly{% endif %}
                                />
                                <button type="button" name="plus" class="quantity__button{% if is_bundle_item and is_valid_bundle %} disabled{% endif %}"
                                  {% if is_bundle_item and is_valid_bundle %}disabled{% endif %}
                                  aria-label="{{ 'products.product.quantity.increase' | t: product: item.product.title | escape }}">
                                  <svg width="16" height="16" viewBox="0 0 15 14" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M2.6875 7H12.3125" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                    <path d="M7.5 2.1875V11.8125" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                  </svg>
                                </button>
                              </quantity-input>
                            {%- else -%}
                              <div class="cart-quantity quantity cart-quantity-gift-wrap self-end">
                                <label class="visually-hidden" for="Quantity-{{ section.id }}-{{ item.index | plus: 1 }}"></label>
                                <button type="button" name="minus" class="quantity__button hidden" disabled aria-label="{{ 'products.product.quantity.decrease' | t: product: item.product.title | escape }}">
                                  <svg width="16" height="16" viewBox="0 0 15 14" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M2.6875 7H12.3125" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                  </svg>
                                </button>
                                <input
                                  class="quantity__input"
                                  disabled
                                  type="text"
                                  name="updates[]"
                                  value="{{ item.quantity }}"
                                  id="Quantity-{{ section.id }}-{{ item.index | plus: 1 }}"
                                  inputmode="numeric"
                                  autocomplete="off"
                                  aria-label="{{ 'products.product.quantity.input_label' | t: product: item.product.title | escape }}"
                                  data-index="{{ item.index | plus: 1 }}"
                                  data-quantity-variant-id="{{ item.variant.id }}"
                                  data-cart-quantity="{{ cart | item_count_for_variant: item.variant.id }}"
                                  size="2"
                                  min="0"
                                  data-min="{{ item.variant.quantity_rule.min }}"
                                  {% if item.variant.quantity_rule.max != null %}
                                    max="{{ item.variant.quantity_rule.max }}"
                                  {% endif %}
                                  step="{{ item.variant.quantity_rule.increment }}"
                                />
                                <button type="button" name="plus" disabled class="quantity__button hidden" aria-label="{{ 'products.product.quantity.increase' | t: product: item.product.title | escape }}">
                                  <svg width="16" height="16" viewBox="0 0 15 14" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M2.6875 7H12.3125" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                    <path d="M7.5 2.1875V11.8125" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                  </svg>
                                </button>
                              </div>
                            {%- endunless -%}
                            {% if has_qty_rules or has_vol_pricing %}
                              <button class="btn btn--plain volume-pricing-toggle" aria-controls="VolumnPricing-{{ section.id }}-{{ item.key }}">
                                <svg class="icon icon-info icon--medium" viewBox="0 0 25 24" stroke="currentColor" fill="none" xmlns="http://www.w3.org/2000/svg">
                                  <path stroke-linecap="round" stroke-linejoin="round" d="M12.5 16V11M13 8C13 8.27614 12.7761 8.5 12.5 8.5C12.2239 8.5 12 8.27614 12 8M13 8C13 7.72386 12.7761 7.5 12.5 7.5C12.2239 7.5 12 7.72386 12 8M13 8H12M22.5 12C22.5 17.5228 18.0228 22 12.5 22C6.97715 22 2.5 17.5228 2.5 12C2.5 6.47715 6.97715 2 12.5 2C18.0228 2 22.5 6.47715 22.5 12Z"></path>
                                </svg>
                              </button>
                              <cart-addon-modal class="drawer cart-addons-drawer drawer--bottom" id="VolumnPricing-{{ section.id }}-{{ item.key }}" hidden>
                                <div class="fixed-overlay absolute" aria-controls="VolumnPricing-{{ section.id }}-{{ item.key }}"></div>
                                <div class="drawer__inner v-scrollable">
                                  <button aria-controls="VolumnPricing-{{ section.id }}-{{ item.key }}" aria-label="{{ 'accessibility.close' | t }}" class="drawer__close-btn z-1">
                                    {%- render 'icon-close' -%}
                                  </button>
                                  <div class="drawer__content cart-addons-drawer__content grid gap-5">
                                    <div>
                                      <h4>{{ item.product.title | escape }}</h4>
                                      {% if item.product.has_only_default_variant == false %}
                                        <div class="flex gap-1">
                                          {% for option in item.options_with_values %}
                                            <span class="text-sm text-subtext">{{ option.value }}{% unless forloop.index0 == last_index %},{% endunless %}</span>
                                          {% endfor %}
                                        </div>
                                      {% endif %}
                                    </div>
                                    <div class="grid gap-3">
                                      {{ qty_rules_vol_pricing }}
                                    </div>
                                  </div>
                                </div>
                              </cart-addon-modal>
                            {% endif %}
                          </div>

                          <div class="cart-item__prices text-right flex flex-col gap-2">
                            {%- liquid
                              # Check if this is a valid bundle item to hide discount tags
                              assign show_discount_tag = true
                              assign is_bundle_check = false
                              assign is_valid_bundle_check = false

                              if item.properties._is_bundle and item.properties._bundle_id
                                assign is_bundle_check = true
                                assign bundle_id_check = item.properties._bundle_id
                                assign bundle_count_check = 0
                                assign expected_components_check = 0

                                # Count items in this bundle group
                                for other_item in cart.items
                                  if other_item.properties._bundle_id == bundle_id_check
                                    assign bundle_count_check = bundle_count_check | plus: 1
                                  endif
                                endfor

                                # Get expected number of components
                                if item.properties._bundle_products_data
                                  assign bundle_products_data_check = item.properties._bundle_products_data | parse_json
                                  assign expected_components_check = bundle_products_data_check.size
                                endif

                                # Bundle is valid if we have ALL expected components
                                if bundle_count_check == expected_components_check and expected_components_check >= 2
                                  assign is_valid_bundle_check = true
                                  # Hide discount tags for valid bundle items
                                  assign show_discount_tag = false
                                endif
                              endif
                            -%}
                            {%- if item.line_level_discount_allocations != blank and show_discount_tag -%}
                              <ul class="cart-item__discounts discounts list-unstyled flex justify-end flex-wrap gap-1" role="list" aria-label="{{ 'customer.order.discount' | t }}">
                                {%- for discount_allocation in item.line_level_discount_allocations -%}
                                  <li class="discount text-sm-extra font-body-bold inline-flex items-center">
                                    {% render 'icon-discount' %}
                                    <span>{{ discount_allocation.discount_application.title }}</span>
                                  </li>
                                {%- endfor -%}
                              </ul>
                            {%- endif -%}
                            <div>
                              <div class="price font-body-bolder{% if item.original_price != item.final_price or item.properties._is_bundle %} price--on-sale{% endif %}">
                                {%- liquid
                                  assign money_price = item.original_price | money
                                  if settings.currency_code_enabled
                                    assign money_price = item.original_price | money_with_currency
                                  endif

                                  # Check if this is a bundle product and calculate discounted price
                                  assign is_bundle_item = false
                                  assign bundle_discount_percent = 0
                                  assign discounted_price = item.original_price

                                  if item.properties._is_bundle and item.properties._discount_value
                                    assign is_bundle_item = true
                                    assign bundle_discount_percent = item.properties._discount_value | times: 1.0
                                    assign discount_amount = item.original_price | times: bundle_discount_percent | divided_by: 100
                                    assign discounted_price = item.original_price | minus: discount_amount
                                  endif

                                  # Check if regular product has automatic discount
                                  assign has_automatic_discount = false
                                  if item.original_price != item.final_price and is_bundle_item == false
                                    assign has_automatic_discount = true
                                  endif
                                -%}
                                
                                {%- if is_bundle_item -%}
                                  {%- comment -%} Bundle product - show discounted price with original crossed out {%- endcomment -%}
                                  <span class="visually-hidden">{{ 'products.product.price.regular_price' | t }}</span>
                                  <span class="visually-hidden">{{ 'products.product.price.sale_price' | t }}</span>
                                  <span class="price__regular">
                                    {%- liquid
                                      if settings.currency_code_enabled
                                        echo discounted_price | money_with_currency
                                      else
                                        echo discounted_price | money
                                      endif
                                    -%}
                                  </span>
                                  <s class="price__sale font-body text-subtext">{{ money_price }}</s>
                                  
                                {%- elsif has_automatic_discount -%}
                                  {%- comment -%} Regular product with automatic discount - show final price with original crossed out {%- endcomment -%}
                                  <span class="visually-hidden">{{ 'products.product.price.regular_price' | t }}</span>
                                  <span class="visually-hidden">{{ 'products.product.price.sale_price' | t }}</span>
                                  <span class="price__regular">
                                    {%- liquid
                                      if settings.currency_code_enabled
                                        echo item.final_price | money_with_currency
                                      else
                                        echo item.final_price | money
                                      endif
                                    -%}
                                  </span>
                                  <s class="price__sale font-body text-subtext">{{ money_price }}</s>
                                  
                                {%- else -%}
                                  {%- comment -%} Regular product without discount - show regular price only {%- endcomment -%}
                                  {{- money_price -}}
                                {%- endif -%}
                              </div>
                              {%- if item.variant.available and item.unit_price_measurement -%}
                                <div>
                                <span class="visually-hidden">{{ 'products.product.price.unit_price' | t }}</span>
                                <span class="unit-price flex items-center text-sm font-body text-subtext">
                                  {%- liquid
                                    capture unit_price_base_unit
                                      if item.variant.unit_price_measurement
                                        if item.variant.unit_price_measurement.reference_value != 1
                                          echo item.variant.unit_price_measurement.reference_value
                                        endif
                                        echo item.variant.unit_price_measurement.reference_unit
                                      endif
                                    endcapture
                                  -%}
                                  ({{ item.variant.unit_price | money }}
                                  <span aria-hidden="true">/</span>
                                  <span class="visually-hidden">&nbsp;{{ 'accessibility.unit_price_separator' | t }}&nbsp;</span>
                                  {{ unit_price_base_unit }})
                                  </span>
                                </div>
                              {%- endif -%}
                            </div>
                          </div>
                        </div>
                      </div>

                    </div>
                    {% liquid
                      assign collections = ''
                      for collection in item.product.collections
                        assign collections = collections | append: collection.id | append: ','
                      endfor
                    %}
                    <foxkit-incart-upsell
                      data-collections="{{ collections | remove_last: ',' }}"
                      data-product-title="{{ item.product.title }}"
                      data-product-id="{{ item.product_id }}"
                    ></foxkit-incart-upsell>
                  </li>
                {%- endcapture -%}
                  {%- liquid
                    unless is_gift_wrap_item
                      echo cart_item
                    else
                      assign cart_gift_wrap_item = cart_item
                    endunless
                  -%}
                {%- endfor -%}
                {%- liquid
                  if cart_gift_wrap_item
                    echo cart_gift_wrap_item
                  endif
                -%}
              </ul>
            </cart-items>

            {%- if section.settings.enable_cart_recommendations and cart != empty -%}
              {%- liquid
                assign first_product_id = cart.items.first.product_id
                if cart_gift_wrap_item
                  if first_product_id == gift_wrapping.object.id
                    if cart.items.size > 1
                      assign first_product_id = cart.items[1].product_id
                    endif
                  endif
                endif
              -%}
              {%- render 'cart-drawer-products-recommendation'
                , color_scheme: section.settings.cart_recommendations_color_scheme
                , section_id: section.id
                , product_id: first_product_id
                , heading: section.settings.cart_recommendations_heading
                , limit: section.settings.cart_recommendations_limit
                , layout: section.settings.cart_recommendations_layout
                , products_recommendations: section.settings.cart_recommendations_products
              -%}
            {%- endif -%}
          </div>
        </div>
        <div id="CartDrawerFooter-{{ section.id }}" class="drawer__footer cart-drawer__footer grid gap-3{% if cart == empty %} hidden{% endif %}">
          <div class="drawer__footer-head grid gap-4">
            {%- render 'gift-wrapping'
              , section_id: section.id
              , gift_wrapping: gift_wrapping
              , gift_wrap_id: gift_wrap_id
              , gift_wraps_in_cart: gift_wraps_in_cart
              , items_in_cart: items_in_cart
              , class: 'text-sm'
            -%}
            {%- if section.settings.show_cart_note or section.settings.show_shipping_rates_calculator or section.settings.show_cart_coupon -%}
              <div is="swipe-wrapper" class="cart-drawer__addons min-w-0 swipe--with-shadow">
                <div class="swipe__element swipe-all disable-scroll-snap">
                  <div class="swipe-all__inner">
                    <div class="inline-flex flex-nowrap gap-2">
                      {%- if section.settings.show_cart_note -%}
                        <button
                          type="button"
                          class="btn btn--secondary btn--small font-body flex gap-2 items-center justify-center"
                          aria-controls="CartNote-{{ section.id }}"
                          aria-expanded="false">
                          <span class="btn__text flex gap-1 items-center">
                            {{ 'general.cart.note.title' | t }}
                            {%- render 'icon-caret-right'
                              , size: 'extra-small' -%}
                          </span>
                        </button>
                        <cart-addon-modal
                          id="CartNote-{{ section.id }}"
                          class="drawer cart-addons-drawer drawer--bottom"
                          hidden>
                          <div class="fixed-overlay absolute" aria-controls="CartNote-{{ section.id }}"></div>
                          <div class="drawer__inner">
                            <button
                              aria-controls="CartNote-{{ section.id }}"
                              class="drawer__close-btn z-1"
                              aria-label="{{ 'accessibility.close' | t }}">
                              {%- render 'icon-close' -%}
                            </button>
                            <div class="drawer__content cart-addons-drawer__content grid gap-5">
                              <h5>{{ 'general.cart.note.title' | t }}</h5>
                              <cart-note class="flex flex-col items-start gap-5">
                                <div class="form-field w-full">
                                  <textarea
                                    name="note"
                                    class="form-control form-control--textarea"
                                    rows="5"
                                    placeholder="{{ 'general.cart.note.caption' | t }}"
                                    id="CartNoteForm-{{ section.id }}">{{ cart.note }}</textarea>
                                  <label class="visually-hidden" for="CartNoteForm-{{ section.id }}">
                                    {{- 'general.cart.note.title' | t -}}
                                  </label>
                                </div>
                                <button
                                  class="btn btn--primary w-full"
                                  type="button"
                                  aria-controls="CartNote-{{ section.id }}"
                                  aria-expanded="false">
                                  <span class="btn__text">{{ 'general.cart.note.button' | t }}</span>
                                </button>
                              </cart-note>
                            </div>
                          </div>
                        </cart-addon-modal>
                      {%- endif -%}
                      {%- if section.settings.show_shipping_rates_calculator -%}
                        <button
                          type="button"
                          class="btn btn--secondary btn--small font-body flex gap-2 items-center justify-center"
                          aria-controls="ShippingCalculator-{{ section.id }}"
                          aria-expanded="false">
                          <span class="btn__text flex gap-1 items-center">
                            {{ 'general.cart.shipping_calculator.title' | t }}
                            {%- render 'icon-caret-right'
                              , size: 'extra-small' -%}
                          </span>
                        </button>
                        <calculate-shipping
                          id="ShippingCalculator-{{ section.id }}"
                          class="drawer cart-addons-drawer drawer--bottom"
                          hidden
                          data-show="fasle">
                          <div class="fixed-overlay absolute" aria-controls="ShippingCalculator-{{ section.id }}"></div>
                          <div class="drawer__inner cart-addons-drawer__inner flex flex-col w-full h-full">
                            <button
                              aria-controls="ShippingCalculator-{{ section.id }}"
                              aria-label="{{ 'accessibility.close' | t }}"
                              class="drawer__close-btn z-1">
                              {%- render 'icon-close' -%}
                            </button>
                            <div class="drawer__content v-scrollable cart-addons-drawer__content flex flex-col gap-4">
                              <h5>{{ 'general.cart.shipping_calculator.title' | t }}</h5>
                              <form
                                class="grid gap-4"
                                action="{{ routes.cart_url }}"
                                method="POST"
                                novalidate
                                is="shipping-calculator">
                                <country-province
                                  class="grid gap-4"
                                  {% if shop.customer_accounts_enabled and customer %}
                                  data-country="{{ customer.default_address.country }}"
                                  {%- if customer.default_address.province != '' %}
                                  data-province="{{ customer.default_address.province }}"
                                  {%- endif -%}
                                  {% endif %}>
                                  <div class="form-field reset-spacing">
                                    <label class="form-label" for="ShippingCalculatorCountry-{{ section.id }}">
                                      {{- 'customer.addresses.country' | t -}}
                                    </label>
                                    <div class="select">
                                      <select
                                        name="address[country]"
                                        class="form-control form-control--select"
                                        autocomplete="country"
                                        id="ShippingCalculatorCountry-{{ section.id }}">
                                        <template>{{- all_country_option_tags -}}</template>
                                      </select>
                                      {%- render 'icon-caret-down'
                                        , size: '2xs' -%}
                                    </div>
                                  </div>
                                  <div class="form-field reset-spacing" hidden>
                                    <label class="form-label" for="ShippingCalculatorProvince-{{ section.id }}">
                                      {{- 'customer.addresses.province' | t -}}
                                    </label>
                                    <div class="select">
                                      <select
                                        name="address[province]"
                                        class="form-control form-control--select"
                                        autocomplete="address-level1"
                                        id="ShippingCalculatorProvince-{{ section.id }}"></select>
                                      {%- render 'icon-caret-down'
                                        , size: '2xs' -%}
                                    </div>
                                  </div>
                                </country-province>
                                <div class="form-field">
                                  <label class="form-label" for="ShippingCalculatorZip-{{ section.id }}">
                                    {{- 'customer.addresses.zip' | t -}}
                                  </label>
                                  <input
                                    name="address[zip]"
                                    class="form-control form-control--input"
                                    type="text"
                                    autocapitalize="characters"
                                    autocomplete="postal-code"
                                    placeholder=" "
                                    id="ShippingCalculatorZip-{{ section.id }}"
                                    {% if shop.customer_accounts_enabled and customer %}
                                    value="{{ customer.default_address.zip }}"
                                    {% endif %}>
                                </div>
                                <div class="form-submit">
                                  <button class="btn btn--primary w-full" type="submit">
                                    <span class="btn__text">{{ 'general.cart.shipping_calculator.button' | t }}</span>
                                    {%- render 'loading-spinner' -%}
                                  </button>
                                </div>
                                <div class="grid gap-3 form__message"></div>
                              </form>
                            </div>
                          </div>
                        </calculate-shipping>
                      {%- endif -%}
                      {%- if section.settings.show_cart_coupon -%}
                        {%- assign cart_coupon_modal_id = 'CartCoupon-' | append: section.id -%}
                        <button
                          type="button"
                          class="btn btn--secondary btn--small font-body flex gap-2 items-center justify-center"
                          aria-controls="{{ cart_coupon_modal_id }}"
                          aria-expanded="false">
                          <span class="btn__text flex gap-1 items-center">
                            {{ 'general.cart.coupon.title' | t }}
                            {%- render 'icon-caret-right'
                              , size: 'extra-small' -%}
                          </span>
                        </button>
                        <cart-addon-modal
                          id="{{ cart_coupon_modal_id }}"
                          class="drawer cart-addons-drawer drawer--bottom"
                          hidden>
                          <div class="fixed-overlay absolute" aria-controls="{{ cart_coupon_modal_id }}"></div>
                          <div class="drawer__inner">
                            <button
                              aria-controls="{{ cart_coupon_modal_id }}"
                              class="drawer__close-btn z-1"
                              aria-label="{{ 'accessibility.close' | t }}">
                              {%- render 'icon-close' -%}
                            </button>
                            <div class="drawer__content cart-addons-drawer__content grid gap-5">
                              <h5>{{ 'general.cart.coupon.title' | t }}</h5>
                              <form
                                is="cart-discount"
                                class="cart-discount__form flex flex-col items-start gap-5"
                                action="{{ routes.cart_url }}"
                                method="POST">
                                <div class="form-field w-full">
                                  <label class="visually-hidden" for="CartCouponForm-{{ section.id }}">
                                    {{- 'general.cart.coupon.title' | t -}}
                                  </label>
                                  <input
                                    id="CartCouponForm-{{ section.id }}"
                                    class="form-control"
                                    name="discount"
                                    placeholder="{{ 'general.cart.coupon.caption' | t }}"
                                    required
                                    aria-required="true">
                                </div>
                                <div class="form-submit w-full">
                                  <button class="btn btn--primary w-full" type="submit">
                                    <span class="btn__text">{{ 'general.cart.coupon.button' | t }}</span>
                                    {%- render 'loading-spinner' -%}
                                  </button>
                                </div>
                                <div class="form__message w-full alert alert--error blocks-radius grid gap-2"></div>
                              </form>
                            </div>
                          </div>
                        </cart-addon-modal>
                      {%- endif -%}
                    </div>
                  </div>
                </div>
              </div>
            {%- endif -%}
          </div>
          <div class="drawer__footer-body">
            <div class="grid gap-5">
              <div class="grid gap-1">
                {%- liquid
                  assign discount_codes = cart.cart_level_discount_applications | where: 'type', 'discount_code' | map: 'title'
                  assign cart_items_has_discount = false
                  for item in cart.items
                    for allocation in item.line_level_discount_allocations
                      if allocation.discount_application.type == 'discount_code'
                        assign cart_items_has_discount = true
                      endif
                    endfor
                  endfor
                -%}
                {%- if cart.cart_level_discount_applications.size > 0 or cart_items_has_discount -%}
                  <ul
                    class="cart__discounts discounts list-unstyled flex flex-wrap gap-1"
                    role="list"
                    aria-label="{{ 'customer.order.discount' | t }}">
                    {%- for discount in cart.cart_level_discount_applications -%}
                      <li class="discount text-sm-extra font-body-bold flex items-center" data-discount-code="{{ discount.title }}">
                        {% render 'icon-discount' %}
                        <span>{{- discount.title -}}</span>
                        <span class="font-body-bold">(-{{ discount.total_allocated_amount | money }})</span>
                        <button
                          is="cart-discount-remove"
                          type="button"
                          aria-label="{{ 'general.cart.coupon.remove' | t: code: discount.title }}"
                          class="btn btn--inherit btn-remove">
                          {% render 'icon-close'
                            , size: 'extra-small' %}
                          {%- render 'loading-spinner' -%}
                        </button>
                      </li>
                    {%- endfor -%}
                    {%- if cart_items_has_discount -%}
                      {%- for item in cart.items -%}
                        {%- for allocation in item.line_level_discount_allocations -%}
                          {%- liquid
                            unless allocation.discount_application.type == 'discount_code'
                              continue
                            endunless

                            assign discount = allocation.discount_application

                            assign is_displayed = discount_codes | has: discount.title
                            if is_displayed
                              continue
                            endif

                            assign discount_codes = item.line_level_discount_allocations | slice: forloop.index0 | map: 'discount_application' | map: 'title' | concat: discount_codes
                          -%}
                          <li class="discount text-sm-extra font-body-bold flex items-center" data-discount-code="{{ discount.title }}">
                            {% render 'icon-discount' %}
                            <span>{{- discount.title -}}</span>
                            <span class="font-body-bold">(-{{ discount.total_allocated_amount | money }})</span>
                            <button
                              is="cart-discount-remove"
                              type="button"
                              aria-label="{{ 'general.cart.coupon.remove' | t: code: discount.title }}"
                              class="btn btn--inherit btn-remove">
                              {% render 'icon-close'
                                , size: 'extra-small' %}
                              {%- render 'loading-spinner' -%}
                            </button>
                          </li>
                        {%- endfor -%}
                      {%- endfor -%}
                    {%- endif -%}
                  </ul>
                {%- endif -%}
                <div class="totals flex justify-between h5 items-center">
                  <span class="totals__subtotal">
                    {{- 'sections.cart.estimated_total' | t -}}
                  </span>
                  <span class="totals__subtotal-value" id="cart-drawer-subtotal-value">
                    {%- liquid
                      # Check if discount codes are applied
                      assign has_discount_codes = false
                      if cart.cart_level_discount_applications.size > 0
                        assign has_discount_codes = true
                      endif
                      
                      # If discount codes are applied, use Shopify's total
                      if has_discount_codes
                        if settings.currency_code_enabled
                          echo cart.total_price | money_with_currency
                        else
                          echo cart.total_price | money
                        endif
                      else
                        # No discount codes - use our bundle calculation
                        assign calculated_total = 0

                        # Group bundle products to check validity
                        assign bundle_groups = ''
                        for item in cart.items
                          if item.properties._is_bundle and item.properties._bundle_id
                            assign bundle_id = item.properties._bundle_id
                            unless bundle_groups contains bundle_id
                              assign bundle_groups = bundle_groups | append: bundle_id | append: ','
                            endunless
                          endif
                        endfor

                        # Calculate total based on bundle validity
                        for item in cart.items
                          if item.properties._is_bundle and item.properties._bundle_id
                            # Check if this bundle group is still valid (has ALL required components)
                            assign bundle_id = item.properties._bundle_id
                            assign bundle_count = 0
                            assign expected_components = 0

                            # Count items in this bundle group
                            for other_item in cart.items
                              if other_item.properties._bundle_id == bundle_id
                                assign bundle_count = bundle_count | plus: 1
                              endif
                            endfor

                            # Get expected number of components from bundle products data
                            if item.properties._bundle_products_data
                              assign bundle_products_data = item.properties._bundle_products_data | parse_json
                              assign expected_components = bundle_products_data.size
                            endif

                            # Bundle is valid only if we have ALL expected components
                            assign is_valid_bundle = false
                            if bundle_count == expected_components and expected_components >= 2
                              assign is_valid_bundle = true
                            endif

                            if is_valid_bundle and item.properties._discount_value
                              # Valid bundle - apply discount
                              assign discount_percent = item.properties._discount_value | times: 1.0

                              # Try to get original price from bundle products data
                              assign true_original_price = item.variant.price
                              if item.properties._bundle_products_data
                                assign bundle_products_data = item.properties._bundle_products_data | parse_json
                                for bundle_product in bundle_products_data
                                  if bundle_product.id == item.variant_id
                                    assign true_original_price = bundle_product.price
                                    break
                                  endif
                                endfor
                              endif

                              # Calculate true original line price and then apply discount
                              assign true_original_line_price = true_original_price | times: item.quantity
                              assign discount_amount = true_original_line_price | times: discount_percent | divided_by: 100
                              assign discounted_line_price = true_original_line_price | minus: discount_amount
                              assign calculated_total = calculated_total | plus: discounted_line_price
                            else
                              # Invalid bundle - check if it has automatic discount
                              if item.original_price != item.final_price
                                # Invalid bundle with automatic discount - use final_line_price
                                assign calculated_total = calculated_total | plus: item.final_line_price
                              else
                                # Invalid bundle without automatic discount - use true original price
                                assign true_original_price = item.variant.price
                                if item.properties._bundle_products_data
                                  assign bundle_products_data = item.properties._bundle_products_data | parse_json
                                  for bundle_product in bundle_products_data
                                    if bundle_product.id == item.variant_id
                                      assign true_original_price = bundle_product.price
                                      break
                                    endif
                                  endfor
                                endif

                                assign true_original_line_price = true_original_price | times: item.quantity
                                assign calculated_total = calculated_total | plus: true_original_line_price
                              endif
                            endif
                          else
                            # This is a regular product - check if it has automatic discount
                            if item.original_price != item.final_price
                              # Has automatic discount - use final_line_price
                              assign calculated_total = calculated_total | plus: item.final_line_price
                            else
                              # No discount - use original_line_price
                              assign calculated_total = calculated_total | plus: item.original_line_price
                            endif
                          endif
                        endfor

                        if settings.currency_code_enabled
                          echo calculated_total | money_with_currency
                        else
                          echo calculated_total | money
                        endif
                      endif
                    -%}
                  </span>
                </div>
                <div class="tax-note text-sm-extra">
                  {%- liquid
                    if cart.taxes_included and shop.shipping_policy.body != blank
                      echo 'sections.cart.taxes_included_and_shipping_policy_html' | t: link: shop.shipping_policy.url
                    elsif cart.taxes_included
                      echo 'sections.cart.taxes_included_but_shipping_at_checkout' | t
                    elsif shop.shipping_policy.body != blank
                      echo 'sections.cart.taxes_and_shipping_policy_at_checkout_html' | t: link: shop.shipping_policy.url
                    else
                      echo 'sections.cart.taxes_and_shipping_at_checkout' | t
                    endif
                  -%}
                </div>
              </div>
              <form
                action="{{ routes.cart_url }}"
                method="POST"
                novalidate
                class="drawer__footer-buttons flex gap-2">
                <a href="{{ routes.cart_url }}" class="btn btn--secondary">
                  <span class="btn__text">{{ 'general.cart.view_empty_cart' | t }}</span>
                </a>
                <button
                  class="btn btn--primary flex-grow"
                  type="submit"
                  name="checkout">
                  <span class="btn__text">{{ 'sections.cart.checkout' | t }}</span>
                </button>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
  </cart-drawer>
{%- endif -%}

{% schema %}
  {
    "name": "t:sections.cart-drawer.name",
    "settings": [
      {
        "type": "header",
        "content": "t:general.general.name"
      },
      {
        "type": "checkbox",
        "id": "show_cart_note",
        "label": "t:sections.cart-drawer.settings.show_cart_note.label",
        "default": true
      },
      {
        "type": "checkbox",
        "id": "show_shipping_rates_calculator",
        "label": "t:sections.cart-drawer.settings.show_shipping_rates_calculator.label"
      },
      {
        "type": "checkbox",
        "id": "show_cart_coupon",
        "label": "t:sections.cart-drawer.settings.show_cart_coupon.label",
        "default": true
      }, {
        "type": "checkbox",
        "id": "show_free_shipping_goal",
        "label": "t:sections.cart-drawer.settings.show_free_shipping_goal.label",
        "default": true,
        "info": "t:settings_schema.cart.settings.free_shipping_minimum_amount.info"
      }, {
        "type": "header",
        "content": "t:sections.cart-drawer.settings.cart_recommendations.header.content"
      }, {
        "type": "paragraph",
        "content": "t:sections.cart-drawer.settings.cart_recommendations.paragraph.content"
      }, {
        "type": "checkbox",
        "id": "enable_cart_recommendations",
        "label": "t:sections.cart-drawer.settings.cart_recommendations.enable.label",
        "default": true
      }, {
        "type": "color_scheme",
        "id": "cart_recommendations_color_scheme",
        "label": "t:general.colors.label",
        "default": "scheme-1"
      }, {
        "type": "text",
        "id": "cart_recommendations_heading",
        "label": "t:general.heading.label",
        "default": "You may also like"
      }, {
        "type": "range",
        "id": "cart_recommendations_limit",
        "label": "t:general.grid.product_limit.label",
        "min": 1,
        "max": 10,
        "step": 1,
        "default": 3
      }, {
        "type": "product_list",
        "id": "cart_recommendations_products",
        "label": "t:sections.cart-drawer.settings.cart_recommendations.product_list.label"
      }, {
        "type": "select",
        "id": "cart_recommendations_layout",
        "label": "t:sections.main-product.blocks.complementary_products.settings.layout.label",
        "default": "grid",
        "options": [
          {
            "value": "grid",
            "label": "t:sections.main-product.blocks.complementary_products.settings.layout.options__1.label"
          }, {
            "value": "horizontal-list",
            "label": "t:sections.main-product.blocks.complementary_products.settings.layout.options__2.label"
          }
        ]
      }, {
        "type": "header",
        "content": "t:sections.cart-drawer.settings.cart_message.header.content"
      }, {
        "type": "color_scheme",
        "id": "cart_mess_color_scheme",
        "label": "t:general.colors.label",
        "default": "scheme-inverse"
      }, {
        "type": "text",
        "id": "cart_message",
        "label": "t:general.message.label"
      }, {
        "type": "select",
        "id": "cart_message_alignment",
        "label": "t:general.text_alignment.label",
        "options": [
          {
            "value": "left",
            "label": "t:general.text_alignment.options__1.label"
          }, {
            "value": "center",
            "label": "t:general.text_alignment.options__2.label"
          }, {
            "value": "right",
            "label": "t:general.text_alignment.options__3.label"
          }
        ],
        "default": "center"
      }
    ]
  }
{% endschema %}
