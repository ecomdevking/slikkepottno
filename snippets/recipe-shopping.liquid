<!-- snippets/recipe-shopping.liquid -->
{% comment %}
  Usage: {% render 'recipe-shopping', block: block %}
{% endcomment %}

{% if article.metafields.custom.ingredients or article.metafields.custom.equipment %}
  {% assign available_products = 0 %}
  {% assign processed_products = '' %}

  <!-- Check if we have any available products -->
  {% if article.metafields.custom.ingredients %}
    {% assign ingredients = article.metafields.custom.ingredients.value %}
    {% for category in ingredients.categories %}
      {% for item in category.items %}
        {% if item.product_handle and item.product_handle != '' and item.product_handle != 'produkt-handle' %}
          {% assign product = all_products[item.product_handle] %}
          {% if product %}
            {% assign check_string = '|||' | append: item.product_handle | append: '|||' %}
            {% unless processed_products contains check_string %}
              {% assign available_products = available_products | plus: 1 %}
              {% assign processed_products = processed_products | append: check_string %}
            {% endunless %}
          {% endif %}
        {% endif %}
      {% endfor %}
    {% endfor %}
  {% endif %}

  {% if article.metafields.custom.equipment %}
    {% assign equipment = article.metafields.custom.equipment.value %}
    {% for category in equipment.categories %}
      {% for item in category.items %}
        {% if item.product_handle and item.product_handle != '' and item.product_handle != 'produkt-handle' %}
          {% assign product = all_products[item.product_handle] %}
          {% if product %}
            {% assign check_string = '|||' | append: item.product_handle | append: '|||' %}
            {% unless processed_products contains check_string %}
              {% assign available_products = available_products | plus: 1 %}
              {% assign processed_products = processed_products | append: check_string %}
            {% endunless %}
          {% endif %}
        {% endif %}
      {% endfor %}
    {% endfor %}
  {% endif %}

  {% if available_products > 0 %}
    <!-- Shopping Button -->
    <div class="recipe-shopping-button-container">
      <button type="button" class="recipe-shopping-btn" onclick="openRecipeModal()">
        {{ block.settings.button_text | default: 'ðŸ›’ KjÃ¸p det du trenger til denne oppskriften!' }}
        <span class="product-count">({{ available_products }} produkter)</span>
      </button>
    </div>

    <!-- Modal (only render once per page) -->
    {% unless recipe_modal_rendered %}
      {% assign recipe_modal_rendered = true %}
      {% assign modal_processed_products = '' %}

      <div id="recipe-shopping-modal" class="recipe-modal-overlay" data-block-id="{{ block.id }}">
        <div class="recipe-modal">
          <div class="recipe-modal-header">
            <h3>{{ block.settings.modal_title | default: 'ðŸ›’ Handle ingredienser til oppskriften' }}</h3>
            <button type="button" class="recipe-modal-close" onclick="closeRecipeModal()">&times;</button>
          </div>

          <div class="recipe-modal-body">
            <div class="products-list">
              <!-- Ingredients -->
              {% if article.metafields.custom.ingredients %}
                {% assign ingredients = article.metafields.custom.ingredients.value %}
                {% for category in ingredients.categories %}
                  {% for item in category.items %}
                    {% if item.product_handle
                      and item.product_handle != ''
                      and item.product_handle != 'produkt-handle'
                    %}
                      {% assign product = all_products[item.product_handle] %}
                      {% if product %}
                        {% assign check_string = '|||' | append: item.product_handle | append: '|||' %}
                        {% unless modal_processed_products contains check_string %}
                          {% assign modal_processed_products = modal_processed_products | append: check_string %}

                          <div class="product-row gap-2">
                            <input
                              type="checkbox"
                              class="product-checkbox"
                              data-variant-id="{{ product.selected_or_first_available_variant.id }}"
                              data-price="{{ product.selected_or_first_available_variant.price | divided_by: 100.0 }}"
                              data-title="{{ product.title | escape }}"
                              id="modal-product-{{ product.id }}"
                            >

                            <label for="modal-product-{{ product.id }}" class="product-label">
                              {% if product.featured_image %}
                                <img
                                  src="{{ product.featured_image | image_url: width: 48, height: 48 }}"
                                  alt="{{ product.title }}"
                                  class="product-thumb"
                                  width="48"
                                  height="48"
                                  loading="lazy"
                                >
                              {% else %}
                                <div class="product-placeholder">ðŸ“¦</div>
                              {% endif %}

                              <span class="product-info">
                                <span class="product-title">{{ item.name }}</span>
                                {% if item.quantity and item.quantity != '' %}
                                  <span class="product-detail">
                                    {{- item.quantity }}
                                    {{ item.unit -}}
                                  </span>
                                {% elsif item.note and item.note != '' and item.note != 'valgfri beskrivelse' %}
                                  <span class="product-detail">{{ item.note }}</span>
                                {% endif %}
                              </span>

                              <span class="product-price">
                                {{- product.selected_or_first_available_variant.price | money -}}
                              </span>
                            </label>
                          </div>
                        {% endunless %}
                      {% endif %}
                    {% endif %}
                  {% endfor %}
                {% endfor %}
              {% endif %}

              <!-- Equipment -->
              {% if article.metafields.custom.equipment %}
                {% assign equipment = article.metafields.custom.equipment.value %}
                {% for category in equipment.categories %}
                  {% for item in category.items %}
                    {% if item.product_handle
                      and item.product_handle != ''
                      and item.product_handle != 'produkt-handle'
                    %}
                      {% assign product = all_products[item.product_handle] %}
                      {% if product %}
                        {% assign check_string = '|||' | append: item.product_handle | append: '|||' %}
                        {% unless modal_processed_products contains check_string %}
                          {% assign modal_processed_products = modal_processed_products | append: check_string %}

                          <div class="product-row gap-2">
                            <input
                              type="checkbox"
                              class="product-checkbox"
                              data-variant-id="{{ product.selected_or_first_available_variant.id }}"
                              data-price="{{ product.selected_or_first_available_variant.price | divided_by: 100.0 }}"
                              data-title="{{ product.title | escape }}"
                              id="modal-product-{{ product.id }}"
                            >

                            <label for="modal-product-{{ product.id }}" class="product-label">
                              {% if product.featured_image %}
                                <img
                                  src="{{ product.featured_image | image_url: width: 48, height: 48 }}"
                                  alt="{{ product.title }}"
                                  class="product-thumb"
                                  width="48"
                                  height="48"
                                  loading="lazy"
                                >
                              {% else %}
                                <div class="product-placeholder">ðŸ”§</div>
                              {% endif %}

                              <span class="product-info">
                                <span class="product-title">{{ item.name }}</span>
                                {% if item.note and item.note != '' and item.note != 'valgfri beskrivelse' %}
                                  <span class="product-detail">{{ item.note }}</span>
                                {% endif %}
                              </span>

                              <span class="product-price">
                                {{- product.selected_or_first_available_variant.price | money -}}
                              </span>
                            </label>
                          </div>
                        {% endunless %}
                      {% endif %}
                    {% endif %}
                  {% endfor %}
                {% endfor %}
              {% endif %}
            </div>
          </div>

          <div class="recipe-modal-footer">
            <div class="cart-summary" id="modal-cart-summary">
              <span id="modal-cart-total">0,00 kr</span> (<span id="modal-item-count">0</span> valgt)
            </div>
            <div class="cart-buttons">
              <button type="button" class="btn-toggle" onclick="modalToggleAll()" id="modal-toggle-btn">
                Velg alle
              </button>
              <button type="button" class="btn-cart" onclick="modalAddSelectedToCart()" id="modal-add-btn" disabled>
                Legg i kurv
              </button>
            </div>
          </div>
        </div>
      </div>

      <!-- CSS and JS remain the same -->
      <style>
        .recipe-shopping-button-container {
          text-align: center;
          margin: 24px 0;
        }

        .recipe-shopping-btn {
          background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
          color: white;
          border: none;
          border-radius: 8px;
          padding: 16px 24px;
          font-size: 16px;
          font-weight: 600;
          cursor: pointer;
          transition: all 0.3s ease;
          box-shadow: 0 4px 12px rgba(0, 123, 255, 0.3);
          display: inline-flex;
          align-items: center;
          gap: 8px;
          min-width: 280px;
          justify-content: center;
        }

        .recipe-shopping-btn:hover {
          transform: translateY(-2px);
          box-shadow: 0 6px 20px rgba(0, 123, 255, 0.4);
          background: linear-gradient(135deg, #0056b3 0%, #004085 100%);
        }

        .recipe-shopping-btn:active {
          transform: translateY(0);
        }

        .product-count {
          font-size: 14px;
          opacity: 0.9;
          font-weight: 400;
        }

        /* Modal Styles */
        .recipe-modal-overlay {
          display: none;
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          background: rgba(0, 0, 0, 0.5);
          z-index: 9999;
          backdrop-filter: blur(4px);
        }

        .recipe-modal-overlay.active {
          display: flex;
          align-items: center;
          justify-content: center;
        }

        .recipe-modal {
          background: white;
          border-radius: 12px;
          width: 90%;
          max-width: 600px;
          max-height: 80vh;
          display: flex;
          flex-direction: column;
          box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
          animation: modalSlideIn 0.3s ease;
        }

        @keyframes modalSlideIn {
          from {
            opacity: 0;
            transform: scale(0.9) translateY(20px);
          }
          to {
            opacity: 1;
            transform: scale(1) translateY(0);
          }
        }

        .recipe-modal-header {
          display: flex;
          align-items: center;
          justify-content: space-between;
          padding: 20px 24px 16px;
          border-bottom: 1px solid #e0e0e0;
        }

        .recipe-modal-header h3 {
          margin: 0;
          font-size: 20px;
          color: #333;
          font-weight: 600;
        }

        .recipe-modal-close {
          background: none;
          border: none;
          font-size: 28px;
          color: #999;
          cursor: pointer;
          padding: 0;
          width: 32px;
          height: 32px;
          display: flex;
          align-items: center;
          justify-content: center;
          border-radius: 50%;
          transition: all 0.2s ease;
        }

        .recipe-modal-close:hover {
          background: #f5f5f5;
          color: #333;
        }

        .recipe-modal-body {
          padding: 20px 24px;
          overflow-y: auto;
          flex: 1;
        }

        .products-list {
          display: flex;
          flex-direction: column;
          gap: 8px;
        }

        .product-row {
          display: flex;
          align-items: center;
          padding: 12px;
          border: 1px solid #f0f0f0;
          border-radius: 8px;
          transition: all 0.2s ease;
        }

        .product-row:hover {
          border-color: #007bff;
          background: #f8f9ff;
        }

        .product-checkbox {
          margin: 0 12px 0 0;
          accent-color: #007bff;
          transform: scale(1.2);
        }

        .product-label {
          display: flex;
          align-items: center;
          cursor: pointer;
          flex: 1;
          gap: 12px;
        }

        .product-thumb, .product-placeholder {
          width: 48px;
          height: 48px;
          border-radius: 6px;
          flex-shrink: 0;
        }

        .product-thumb {
          object-fit: cover;
          border: 1px solid #e0e0e0;
        }

        .product-placeholder {
          background: #f5f5f5;
          border: 1px solid #e0e0e0;
          display: flex;
          align-items: center;
          justify-content: center;
          font-size: 20px;
        }

        .product-info {
          flex: 1;
          display: flex;
          flex-direction: column;
          min-width: 0;
        }

        .product-title {
          font-size: 16px;
          font-weight: 500;
          color: #333;
          line-height: 1.3;
        }

        .product-detail {
          font-size: 14px;
          color: #666;
          margin-top: 2px;
        }

        .product-price {
          font-size: 16px;
          font-weight: 600;
          color: #007bff;
          flex-shrink: 0;
        }

        .recipe-modal-footer {
          border-top: 1px solid #e0e0e0;
          padding: 16px 24px 20px;
          display: flex;
          align-items: center;
          justify-content: space-between;
          gap: 16px;
        }

        .cart-summary {
          font-size: 14px;
          color: #666;
        }

        #modal-cart-total {
          font-weight: 600;
          color: #333;
          font-size: 16px;
        }

        .cart-buttons {
          display: flex;
          gap: 12px;
          align-items: center;
        }

        .btn-toggle, .btn-cart {
          padding: 10px 16px;
          border: 1px solid #e0e0e0;
          border-radius: 6px;
          font-size: 14px;
          font-weight: 500;
          cursor: pointer;
          transition: all 0.2s ease;
          background: #fff;
          color: #333;
        }

        .btn-toggle:hover {
          background: #f8f9fa;
          border-color: #007bff;
          color: #007bff;
        }

        .btn-cart {
          background: #007bff;
          color: white;
          border-color: #007bff;
          min-width: 120px;
        }

        .btn-cart:hover:not(:disabled) {
          background: #0056b3;
          border-color: #0056b3;
        }

        .btn-cart:disabled {
          background: #6c757d;
          border-color: #6c757d;
          cursor: not-allowed;
          opacity: 0.6;
        }

        /* Mobile optimization */
        @media (max-width: 768px) {
          .recipe-shopping-btn {
            padding: 14px 20px;
            font-size: 14px;
            min-width: 260px;
          }

          .recipe-modal {
            width: 95%;
            max-height: 90vh;
            margin: 20px;
          }

          .recipe-modal-header {
            padding: 16px 20px 12px;
          }

          .recipe-modal-header h3 {
            font-size: 18px;
          }

          .recipe-modal-body {
            padding: 16px 20px;
          }

          .product-row {
            padding: 10px;
          }

          .product-thumb, .product-placeholder {
            width: 40px;
            height: 40px;
          }

          .product-title {
            font-size: 14px;
          }

          .product-detail {
            font-size: 12px;
          }

          .product-price {
            font-size: 14px;
          }

          .recipe-modal-footer {
            flex-direction: column;
            align-items: stretch;
            gap: 12px;
            padding: 16px 20px;
          }

          .cart-summary {
            text-align: center;
            order: -1;
          }

          .cart-buttons {
            justify-content: center;
          }

          .btn-toggle, .btn-cart {
            flex: 1;
            max-width: 140px;
          }
        }

        /* Success toast */
        .success-toast {
          position: fixed;
          top: 20px;
          right: 20px;
          background: #28a745;
          color: white;
          padding: 12px 16px;
          border-radius: 6px;
          z-index: 10000;
          font-size: 14px;
          box-shadow: 0 4px 12px rgba(0,0,0,0.2);
          animation: slideIn 0.3s ease;
        }

        @keyframes slideIn {
          from { transform: translateX(100%); opacity: 0; }
          to { transform: translateX(0); opacity: 1; }
        }

        @media (max-width: 768px) {
          .success-toast {
            top: 10px;
            right: 10px;
            left: 10px;
            text-align: center;
          }
        }
      </style>

      <script>
        // Clear any existing instance first
        if (window.recipeModalFunctions) {
          delete window.recipeModalFunctions;
        }

        window.recipeModalFunctions = {
          openModal: function () {
            console.log('Modal opened');
            const modal = document.querySelector('[data-block-id="{{ block.id }}"]#recipe-shopping-modal');

            if (modal) {
              modal.classList.add('active');
              document.body.style.overflow = 'hidden';
              this.updateDisplay();
            }
          },

          closeModal: function () {
            console.log('Modal closed');
            const modal = document.querySelector('[data-block-id="{{ block.id }}"]#recipe-shopping-modal');
            if (modal) {
              modal.classList.remove('active');
              document.body.style.overflow = '';
            }
          },

          toggleAll: function () {
            const checkboxes = document.querySelectorAll(
              '[data-block-id="{{ block.id }}"]#recipe-shopping-modal .product-checkbox'
            );
            const allChecked = Array.from(checkboxes).every((cb) => cb.checked);

            checkboxes.forEach((cb) => {
              cb.checked = !allChecked;
            });

            this.updateDisplay();
          },

          updateDisplay: function () {
            const modal = document.querySelector('[data-block-id="{{ block.id }}"]#recipe-shopping-modal');
            const checkboxes = modal.querySelectorAll('.product-checkbox:checked');
            const totalEl = modal.querySelector('#modal-cart-total');
            const countEl = modal.querySelector('#modal-item-count');
            const addBtn = modal.querySelector('#modal-add-btn');
            const toggleBtn = modal.querySelector('#modal-toggle-btn');

            if (totalEl && countEl && addBtn) {
              let total = 0;
              checkboxes.forEach((cb) => {
                total += parseFloat(cb.dataset.price || 0);
              });

              totalEl.textContent = `${total.toFixed(2).replace('.', ',')} kr`;
              countEl.textContent = checkboxes.length;
              addBtn.disabled = checkboxes.length === 0;
            }

            if (toggleBtn) {
              const allCheckboxes = modal.querySelectorAll(
                '[data-block-id="{{ block.id }}"]#recipe-shopping-modal .product-checkbox'
              );
              const allChecked = Array.from(allCheckboxes).every((cb) => cb.checked);
              toggleBtn.textContent = allChecked ? 'Fjern alle' : 'Velg alle';
            }
          },

          addToCart: function () {
            console.log('Add to cart clicked - processing...');

            // Get unique selected items
            const checkboxes = document.querySelectorAll(
              '[data-block-id="{{ block.id }}"]#recipe-shopping-modal .product-checkbox:checked'
            );
            const uniqueItems = new Map();

            checkboxes.forEach((cb) => {
              const variantId = cb.dataset.variantId;
              if (!uniqueItems.has(variantId)) {
                uniqueItems.set(variantId, {
                  id: variantId,
                  title: cb.dataset.title || 'Product',
                });
              }
            });

            const itemsArray = Array.from(uniqueItems.values());
            console.log('Unique items to add:', itemsArray.length);

            if (itemsArray.length === 0) {
              alert('Velg minst ett produkt');
              return;
            }

            const button = document.getElementById('modal-add-btn');
            const originalText = button.textContent;
            button.textContent = 'Legger til...';
            button.disabled = true;

            // Add items one by one
            this.addItemsSequentially(itemsArray, 0, button, originalText);
          },

          addItemsSequentially: function (items, index, button, originalText) {
            if (index >= items.length) {
              console.log('All items added successfully');
              button.textContent = originalText;
              button.disabled = false;

              // Clear selections
              document
                .querySelectorAll('[data-block-id="{{ block.id }}"]#recipe-shopping-modal .product-checkbox')
                .forEach((cb) => {
                  cb.checked = false;
                });
              this.updateDisplay();

              alert(`${items.length} produkt${items.length > 1 ? 'er' : ''} lagt til i kurven!`);

              // Update cart display properly
              this.updateCartDisplay();
              this.closeModal();
              return;
            }

            console.log(`Adding item ${index + 1} of ${items.length}:`, items[index].id);

            const formData = new FormData();
            formData.append('id', items[index].id);
            formData.append('quantity', '1');

            fetch('/cart/add.js', {
              method: 'POST',
              body: formData,
            })
              .then((response) => {
                if (!response.ok) {
                  throw new Error(`HTTP ${response.status}`);
                }
                return response.json();
              })
              .then((data) => {
                console.log(`Item ${index + 1} added:`, data);
                // Wait 150ms then add next item
                setTimeout(() => {
                  this.addItemsSequentially(items, index + 1, button, originalText);
                }, 150);
              })
              .catch((error) => {
                console.error(`Error adding item ${index + 1}:`, error);
                button.textContent = 'Feil - prÃ¸v igjen';
                setTimeout(() => {
                  button.textContent = originalText;
                  button.disabled = false;
                }, 2000);
              });
          },

          // Add this new function
          updateCartDisplay: async function () {
            try {
              const response = await fetch('/cart.js');
              const cartData = await response.json();

              // Update cart count elements (adjust selectors for your theme)
              const cartCountElements = document.querySelectorAll(
                '.cart-count, [data-cart-count], .header__cart-count'
              );
              cartCountElements.forEach((element) => {
                element.textContent = cartData.item_count;
              });

              // Update cart total if elements exist
              const cartTotalElements = document.querySelectorAll('.cart-total, [data-cart-total]');
              cartTotalElements.forEach((element) => {
                element.textContent = new Intl.NumberFormat('nb-NO', {
                  style: 'currency',
                  currency: 'NOK',
                }).format(cartData.total_price / 100);
              });

              // Trigger cart drawer refresh for Hyper theme
              if (window.theme && window.theme.cartDrawer) {
                window.theme.cartDrawer.refresh();
              }

              // Alternative event dispatch
              window.dispatchEvent(
                new CustomEvent('cart:updated', {
                  detail: { cart: cartData },
                })
              );
            } catch (error) {
              console.error('Failed to update cart display:', error);
            }
          },
        };

        // Assign to global functions for HTML onclick handlers
        window.openRecipeModal = function () {
          window.recipeModalFunctions.openModal();
        };
        window.closeRecipeModal = function () {
          window.recipeModalFunctions.closeModal();
        };
        window.modalToggleAll = function () {
          window.recipeModalFunctions.toggleAll();
        };
        window.modalAddSelectedToCart = function () {
          window.recipeModalFunctions.addToCart();
        };

        // Initialize event listeners when DOM is ready
        function initializeModal() {
          const checkboxes = document.querySelectorAll(
            '[data-block-id="{{ block.id }}"]#recipe-shopping-modal .product-checkbox'
          );
          console.log('Setting up event listeners for', checkboxes.length, 'checkboxes');

          checkboxes.forEach((checkbox) => {
            checkbox.addEventListener('change', function () {
              window.recipeModalFunctions.updateDisplay();
            });
          });

          // Modal close on outside click
          document.addEventListener('click', function (e) {
            const modal = document.getElementById('recipe-shopping-modal');
            if (e.target === modal) {
              window.recipeModalFunctions.closeModal();
            }
          });
        }

        // Safe initialization
        if (document.readyState === 'loading') {
          document.addEventListener('DOMContentLoaded', initializeModal);
        } else {
          setTimeout(initializeModal, 100);
        }

        console.log('Recipe modal initialized - no auto-execution');
      </script>
    {% endunless %}
  {% endif %}
{% endif %}
